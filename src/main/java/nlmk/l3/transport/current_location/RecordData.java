/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package nlmk.l3.transport.current_location;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

/** Данные операции */
@org.apache.avro.specific.AvroGenerated
public class RecordData extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -387220948564982709L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"RecordData\",\"namespace\":\"nlmk.l3.transport.current_location\",\"doc\":\"Данные операции\",\"fields\":[{\"name\":\"stationCurrentCode\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Код текущей станции\"},{\"name\":\"stationCurrentName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Наименование текущей станции\"},{\"name\":\"pathCode\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Код текущего пути\"},{\"name\":\"pathName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Наименование текущего пути\"},{\"name\":\"dateBegin\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Дата постановки на текущий путь (в формате YYYY-MM-DDThh:mm:ss+hh:mm)\"},{\"name\":\"positions\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"RecordPositions\",\"fields\":[{\"name\":\"wagonNum\",\"type\":\"int\",\"doc\":\"Номер вагона\"},{\"name\":\"waybillWagonLink\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Идентификатор конкретного вагона в конкретной накладной\"},{\"name\":\"wagonType\",\"type\":\"int\",\"doc\":\"Пустой-порожний\"},{\"name\":\"elemNum\",\"type\":\"int\",\"doc\":\"порядковый номер\"}]}},\"doc\":\"Позиции\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<RecordData> ENCODER =
      new BinaryMessageEncoder<RecordData>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<RecordData> DECODER =
      new BinaryMessageDecoder<RecordData>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<RecordData> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<RecordData> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<RecordData> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<RecordData>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this RecordData to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a RecordData from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a RecordData instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static RecordData fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Код текущей станции */
   private java.lang.String stationCurrentCode;
  /** Наименование текущей станции */
   private java.lang.String stationCurrentName;
  /** Код текущего пути */
   private java.lang.String pathCode;
  /** Наименование текущего пути */
   private java.lang.String pathName;
  /** Дата постановки на текущий путь (в формате YYYY-MM-DDThh:mm:ss+hh:mm) */
   private java.lang.String dateBegin;
  /** Позиции */
   private java.util.List<nlmk.l3.transport.current_location.RecordPositions> positions;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public RecordData() {}

  /**
   * All-args constructor.
   * @param stationCurrentCode Код текущей станции
   * @param stationCurrentName Наименование текущей станции
   * @param pathCode Код текущего пути
   * @param pathName Наименование текущего пути
   * @param dateBegin Дата постановки на текущий путь (в формате YYYY-MM-DDThh:mm:ss+hh:mm)
   * @param positions Позиции
   */
  public RecordData(java.lang.String stationCurrentCode, java.lang.String stationCurrentName, java.lang.String pathCode, java.lang.String pathName, java.lang.String dateBegin, java.util.List<nlmk.l3.transport.current_location.RecordPositions> positions) {
    this.stationCurrentCode = stationCurrentCode;
    this.stationCurrentName = stationCurrentName;
    this.pathCode = pathCode;
    this.pathName = pathName;
    this.dateBegin = dateBegin;
    this.positions = positions;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return stationCurrentCode;
    case 1: return stationCurrentName;
    case 2: return pathCode;
    case 3: return pathName;
    case 4: return dateBegin;
    case 5: return positions;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: stationCurrentCode = value$ != null ? value$.toString() : null; break;
    case 1: stationCurrentName = value$ != null ? value$.toString() : null; break;
    case 2: pathCode = value$ != null ? value$.toString() : null; break;
    case 3: pathName = value$ != null ? value$.toString() : null; break;
    case 4: dateBegin = value$ != null ? value$.toString() : null; break;
    case 5: positions = (java.util.List<nlmk.l3.transport.current_location.RecordPositions>)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'stationCurrentCode' field.
   * @return Код текущей станции
   */
  public java.lang.String getStationCurrentCode() {
    return stationCurrentCode;
  }


  /**
   * Sets the value of the 'stationCurrentCode' field.
   * Код текущей станции
   * @param value the value to set.
   */
  public void setStationCurrentCode(java.lang.String value) {
    this.stationCurrentCode = value;
  }

  /**
   * Gets the value of the 'stationCurrentName' field.
   * @return Наименование текущей станции
   */
  public java.lang.String getStationCurrentName() {
    return stationCurrentName;
  }


  /**
   * Sets the value of the 'stationCurrentName' field.
   * Наименование текущей станции
   * @param value the value to set.
   */
  public void setStationCurrentName(java.lang.String value) {
    this.stationCurrentName = value;
  }

  /**
   * Gets the value of the 'pathCode' field.
   * @return Код текущего пути
   */
  public java.lang.String getPathCode() {
    return pathCode;
  }


  /**
   * Sets the value of the 'pathCode' field.
   * Код текущего пути
   * @param value the value to set.
   */
  public void setPathCode(java.lang.String value) {
    this.pathCode = value;
  }

  /**
   * Gets the value of the 'pathName' field.
   * @return Наименование текущего пути
   */
  public java.lang.String getPathName() {
    return pathName;
  }


  /**
   * Sets the value of the 'pathName' field.
   * Наименование текущего пути
   * @param value the value to set.
   */
  public void setPathName(java.lang.String value) {
    this.pathName = value;
  }

  /**
   * Gets the value of the 'dateBegin' field.
   * @return Дата постановки на текущий путь (в формате YYYY-MM-DDThh:mm:ss+hh:mm)
   */
  public java.lang.String getDateBegin() {
    return dateBegin;
  }


  /**
   * Sets the value of the 'dateBegin' field.
   * Дата постановки на текущий путь (в формате YYYY-MM-DDThh:mm:ss+hh:mm)
   * @param value the value to set.
   */
  public void setDateBegin(java.lang.String value) {
    this.dateBegin = value;
  }

  /**
   * Gets the value of the 'positions' field.
   * @return Позиции
   */
  public java.util.List<nlmk.l3.transport.current_location.RecordPositions> getPositions() {
    return positions;
  }


  /**
   * Sets the value of the 'positions' field.
   * Позиции
   * @param value the value to set.
   */
  public void setPositions(java.util.List<nlmk.l3.transport.current_location.RecordPositions> value) {
    this.positions = value;
  }

  /**
   * Creates a new RecordData RecordBuilder.
   * @return A new RecordData RecordBuilder
   */
  public static nlmk.l3.transport.current_location.RecordData.Builder newBuilder() {
    return new nlmk.l3.transport.current_location.RecordData.Builder();
  }

  /**
   * Creates a new RecordData RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new RecordData RecordBuilder
   */
  public static nlmk.l3.transport.current_location.RecordData.Builder newBuilder(nlmk.l3.transport.current_location.RecordData.Builder other) {
    if (other == null) {
      return new nlmk.l3.transport.current_location.RecordData.Builder();
    } else {
      return new nlmk.l3.transport.current_location.RecordData.Builder(other);
    }
  }

  /**
   * Creates a new RecordData RecordBuilder by copying an existing RecordData instance.
   * @param other The existing instance to copy.
   * @return A new RecordData RecordBuilder
   */
  public static nlmk.l3.transport.current_location.RecordData.Builder newBuilder(nlmk.l3.transport.current_location.RecordData other) {
    if (other == null) {
      return new nlmk.l3.transport.current_location.RecordData.Builder();
    } else {
      return new nlmk.l3.transport.current_location.RecordData.Builder(other);
    }
  }

  /**
   * RecordBuilder for RecordData instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<RecordData>
    implements org.apache.avro.data.RecordBuilder<RecordData> {

    /** Код текущей станции */
    private java.lang.String stationCurrentCode;
    /** Наименование текущей станции */
    private java.lang.String stationCurrentName;
    /** Код текущего пути */
    private java.lang.String pathCode;
    /** Наименование текущего пути */
    private java.lang.String pathName;
    /** Дата постановки на текущий путь (в формате YYYY-MM-DDThh:mm:ss+hh:mm) */
    private java.lang.String dateBegin;
    /** Позиции */
    private java.util.List<nlmk.l3.transport.current_location.RecordPositions> positions;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(nlmk.l3.transport.current_location.RecordData.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.stationCurrentCode)) {
        this.stationCurrentCode = data().deepCopy(fields()[0].schema(), other.stationCurrentCode);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.stationCurrentName)) {
        this.stationCurrentName = data().deepCopy(fields()[1].schema(), other.stationCurrentName);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.pathCode)) {
        this.pathCode = data().deepCopy(fields()[2].schema(), other.pathCode);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.pathName)) {
        this.pathName = data().deepCopy(fields()[3].schema(), other.pathName);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.dateBegin)) {
        this.dateBegin = data().deepCopy(fields()[4].schema(), other.dateBegin);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.positions)) {
        this.positions = data().deepCopy(fields()[5].schema(), other.positions);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
    }

    /**
     * Creates a Builder by copying an existing RecordData instance
     * @param other The existing instance to copy.
     */
    private Builder(nlmk.l3.transport.current_location.RecordData other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.stationCurrentCode)) {
        this.stationCurrentCode = data().deepCopy(fields()[0].schema(), other.stationCurrentCode);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.stationCurrentName)) {
        this.stationCurrentName = data().deepCopy(fields()[1].schema(), other.stationCurrentName);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.pathCode)) {
        this.pathCode = data().deepCopy(fields()[2].schema(), other.pathCode);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.pathName)) {
        this.pathName = data().deepCopy(fields()[3].schema(), other.pathName);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.dateBegin)) {
        this.dateBegin = data().deepCopy(fields()[4].schema(), other.dateBegin);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.positions)) {
        this.positions = data().deepCopy(fields()[5].schema(), other.positions);
        fieldSetFlags()[5] = true;
      }
    }

    /**
      * Gets the value of the 'stationCurrentCode' field.
      * Код текущей станции
      * @return The value.
      */
    public java.lang.String getStationCurrentCode() {
      return stationCurrentCode;
    }


    /**
      * Sets the value of the 'stationCurrentCode' field.
      * Код текущей станции
      * @param value The value of 'stationCurrentCode'.
      * @return This builder.
      */
    public nlmk.l3.transport.current_location.RecordData.Builder setStationCurrentCode(java.lang.String value) {
      validate(fields()[0], value);
      this.stationCurrentCode = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'stationCurrentCode' field has been set.
      * Код текущей станции
      * @return True if the 'stationCurrentCode' field has been set, false otherwise.
      */
    public boolean hasStationCurrentCode() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'stationCurrentCode' field.
      * Код текущей станции
      * @return This builder.
      */
    public nlmk.l3.transport.current_location.RecordData.Builder clearStationCurrentCode() {
      stationCurrentCode = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'stationCurrentName' field.
      * Наименование текущей станции
      * @return The value.
      */
    public java.lang.String getStationCurrentName() {
      return stationCurrentName;
    }


    /**
      * Sets the value of the 'stationCurrentName' field.
      * Наименование текущей станции
      * @param value The value of 'stationCurrentName'.
      * @return This builder.
      */
    public nlmk.l3.transport.current_location.RecordData.Builder setStationCurrentName(java.lang.String value) {
      validate(fields()[1], value);
      this.stationCurrentName = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'stationCurrentName' field has been set.
      * Наименование текущей станции
      * @return True if the 'stationCurrentName' field has been set, false otherwise.
      */
    public boolean hasStationCurrentName() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'stationCurrentName' field.
      * Наименование текущей станции
      * @return This builder.
      */
    public nlmk.l3.transport.current_location.RecordData.Builder clearStationCurrentName() {
      stationCurrentName = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'pathCode' field.
      * Код текущего пути
      * @return The value.
      */
    public java.lang.String getPathCode() {
      return pathCode;
    }


    /**
      * Sets the value of the 'pathCode' field.
      * Код текущего пути
      * @param value The value of 'pathCode'.
      * @return This builder.
      */
    public nlmk.l3.transport.current_location.RecordData.Builder setPathCode(java.lang.String value) {
      validate(fields()[2], value);
      this.pathCode = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'pathCode' field has been set.
      * Код текущего пути
      * @return True if the 'pathCode' field has been set, false otherwise.
      */
    public boolean hasPathCode() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'pathCode' field.
      * Код текущего пути
      * @return This builder.
      */
    public nlmk.l3.transport.current_location.RecordData.Builder clearPathCode() {
      pathCode = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'pathName' field.
      * Наименование текущего пути
      * @return The value.
      */
    public java.lang.String getPathName() {
      return pathName;
    }


    /**
      * Sets the value of the 'pathName' field.
      * Наименование текущего пути
      * @param value The value of 'pathName'.
      * @return This builder.
      */
    public nlmk.l3.transport.current_location.RecordData.Builder setPathName(java.lang.String value) {
      validate(fields()[3], value);
      this.pathName = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'pathName' field has been set.
      * Наименование текущего пути
      * @return True if the 'pathName' field has been set, false otherwise.
      */
    public boolean hasPathName() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'pathName' field.
      * Наименование текущего пути
      * @return This builder.
      */
    public nlmk.l3.transport.current_location.RecordData.Builder clearPathName() {
      pathName = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'dateBegin' field.
      * Дата постановки на текущий путь (в формате YYYY-MM-DDThh:mm:ss+hh:mm)
      * @return The value.
      */
    public java.lang.String getDateBegin() {
      return dateBegin;
    }


    /**
      * Sets the value of the 'dateBegin' field.
      * Дата постановки на текущий путь (в формате YYYY-MM-DDThh:mm:ss+hh:mm)
      * @param value The value of 'dateBegin'.
      * @return This builder.
      */
    public nlmk.l3.transport.current_location.RecordData.Builder setDateBegin(java.lang.String value) {
      validate(fields()[4], value);
      this.dateBegin = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'dateBegin' field has been set.
      * Дата постановки на текущий путь (в формате YYYY-MM-DDThh:mm:ss+hh:mm)
      * @return True if the 'dateBegin' field has been set, false otherwise.
      */
    public boolean hasDateBegin() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'dateBegin' field.
      * Дата постановки на текущий путь (в формате YYYY-MM-DDThh:mm:ss+hh:mm)
      * @return This builder.
      */
    public nlmk.l3.transport.current_location.RecordData.Builder clearDateBegin() {
      dateBegin = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'positions' field.
      * Позиции
      * @return The value.
      */
    public java.util.List<nlmk.l3.transport.current_location.RecordPositions> getPositions() {
      return positions;
    }


    /**
      * Sets the value of the 'positions' field.
      * Позиции
      * @param value The value of 'positions'.
      * @return This builder.
      */
    public nlmk.l3.transport.current_location.RecordData.Builder setPositions(java.util.List<nlmk.l3.transport.current_location.RecordPositions> value) {
      validate(fields()[5], value);
      this.positions = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'positions' field has been set.
      * Позиции
      * @return True if the 'positions' field has been set, false otherwise.
      */
    public boolean hasPositions() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'positions' field.
      * Позиции
      * @return This builder.
      */
    public nlmk.l3.transport.current_location.RecordData.Builder clearPositions() {
      positions = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public RecordData build() {
      try {
        RecordData record = new RecordData();
        record.stationCurrentCode = fieldSetFlags()[0] ? this.stationCurrentCode : (java.lang.String) defaultValue(fields()[0]);
        record.stationCurrentName = fieldSetFlags()[1] ? this.stationCurrentName : (java.lang.String) defaultValue(fields()[1]);
        record.pathCode = fieldSetFlags()[2] ? this.pathCode : (java.lang.String) defaultValue(fields()[2]);
        record.pathName = fieldSetFlags()[3] ? this.pathName : (java.lang.String) defaultValue(fields()[3]);
        record.dateBegin = fieldSetFlags()[4] ? this.dateBegin : (java.lang.String) defaultValue(fields()[4]);
        record.positions = fieldSetFlags()[5] ? this.positions : (java.util.List<nlmk.l3.transport.current_location.RecordPositions>) defaultValue(fields()[5]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<RecordData>
    WRITER$ = (org.apache.avro.io.DatumWriter<RecordData>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<RecordData>
    READER$ = (org.apache.avro.io.DatumReader<RecordData>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.stationCurrentCode);

    out.writeString(this.stationCurrentName);

    out.writeString(this.pathCode);

    out.writeString(this.pathName);

    out.writeString(this.dateBegin);

    long size0 = this.positions.size();
    out.writeArrayStart();
    out.setItemCount(size0);
    long actualSize0 = 0;
    for (nlmk.l3.transport.current_location.RecordPositions e0: this.positions) {
      actualSize0++;
      out.startItem();
      e0.customEncode(out);
    }
    out.writeArrayEnd();
    if (actualSize0 != size0)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size0 + ", but element count was " + actualSize0 + ".");

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.stationCurrentCode = in.readString();

      this.stationCurrentName = in.readString();

      this.pathCode = in.readString();

      this.pathName = in.readString();

      this.dateBegin = in.readString();

      long size0 = in.readArrayStart();
      java.util.List<nlmk.l3.transport.current_location.RecordPositions> a0 = this.positions;
      if (a0 == null) {
        a0 = new SpecificData.Array<nlmk.l3.transport.current_location.RecordPositions>((int)size0, SCHEMA$.getField("positions").schema());
        this.positions = a0;
      } else a0.clear();
      SpecificData.Array<nlmk.l3.transport.current_location.RecordPositions> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<nlmk.l3.transport.current_location.RecordPositions>)a0 : null);
      for ( ; 0 < size0; size0 = in.arrayNext()) {
        for ( ; size0 != 0; size0--) {
          nlmk.l3.transport.current_location.RecordPositions e0 = (ga0 != null ? ga0.peek() : null);
          if (e0 == null) {
            e0 = new nlmk.l3.transport.current_location.RecordPositions();
          }
          e0.customDecode(in);
          a0.add(e0);
        }
      }

    } else {
      for (int i = 0; i < 6; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.stationCurrentCode = in.readString();
          break;

        case 1:
          this.stationCurrentName = in.readString();
          break;

        case 2:
          this.pathCode = in.readString();
          break;

        case 3:
          this.pathName = in.readString();
          break;

        case 4:
          this.dateBegin = in.readString();
          break;

        case 5:
          long size0 = in.readArrayStart();
          java.util.List<nlmk.l3.transport.current_location.RecordPositions> a0 = this.positions;
          if (a0 == null) {
            a0 = new SpecificData.Array<nlmk.l3.transport.current_location.RecordPositions>((int)size0, SCHEMA$.getField("positions").schema());
            this.positions = a0;
          } else a0.clear();
          SpecificData.Array<nlmk.l3.transport.current_location.RecordPositions> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<nlmk.l3.transport.current_location.RecordPositions>)a0 : null);
          for ( ; 0 < size0; size0 = in.arrayNext()) {
            for ( ; size0 != 0; size0--) {
              nlmk.l3.transport.current_location.RecordPositions e0 = (ga0 != null ? ga0.peek() : null);
              if (e0 == null) {
                e0 = new nlmk.l3.transport.current_location.RecordPositions();
              }
              e0.customDecode(in);
              a0.add(e0);
            }
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










