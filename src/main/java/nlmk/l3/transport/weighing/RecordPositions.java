/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package nlmk.l3.transport.weighing;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class RecordPositions extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -8975148515758206693L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"RecordPositions\",\"namespace\":\"nlmk.l3.transport.weighing\",\"fields\":[{\"name\":\"wagonNum\",\"type\":\"int\",\"doc\":\"Номер вагона\"},{\"name\":\"materialCode\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Код груза\"},{\"name\":\"materialName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Наименование груза\"},{\"name\":\"weighingDate\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Дата провески вагона (в формате YYYY-MM-DDThh:mm:ss+hh:mm)\"},{\"name\":\"weightGross\",\"type\":\"float\",\"doc\":\"Вес брутто, т\"},{\"name\":\"weightTare\",\"type\":\"float\",\"doc\":\"Вес тары, т\"},{\"name\":\"weightTareEmpty\",\"type\":[\"null\",\"float\"],\"doc\":\"Вес тары до выгрузки\"},{\"name\":\"tonnage\",\"type\":[\"null\",\"float\"],\"doc\":\"Грузоподъёмность\"},{\"name\":\"waybillWagonLink\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Идентификатор конкретного вагона в конкретной накладной\"},{\"name\":\"supplierType\",\"type\":{\"type\":\"enum\",\"name\":\"enum_supplierType\",\"symbols\":[\"INTERNAL\",\"EXTERNAL\"]},\"doc\":\"Тип поставщика (EXTERNAL - внешний INTERNAL - внутренний)\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<RecordPositions> ENCODER =
      new BinaryMessageEncoder<RecordPositions>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<RecordPositions> DECODER =
      new BinaryMessageDecoder<RecordPositions>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<RecordPositions> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<RecordPositions> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<RecordPositions> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<RecordPositions>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this RecordPositions to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a RecordPositions from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a RecordPositions instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static RecordPositions fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Номер вагона */
   private int wagonNum;
  /** Код груза */
   private java.lang.String materialCode;
  /** Наименование груза */
   private java.lang.String materialName;
  /** Дата провески вагона (в формате YYYY-MM-DDThh:mm:ss+hh:mm) */
   private java.lang.String weighingDate;
  /** Вес брутто, т */
   private float weightGross;
  /** Вес тары, т */
   private float weightTare;
  /** Вес тары до выгрузки */
   private java.lang.Float weightTareEmpty;
  /** Грузоподъёмность */
   private java.lang.Float tonnage;
  /** Идентификатор конкретного вагона в конкретной накладной */
   private java.lang.String waybillWagonLink;
  /** Тип поставщика (EXTERNAL - внешний INTERNAL - внутренний) */
   private nlmk.l3.transport.weighing.enum_supplierType supplierType;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public RecordPositions() {}

  /**
   * All-args constructor.
   * @param wagonNum Номер вагона
   * @param materialCode Код груза
   * @param materialName Наименование груза
   * @param weighingDate Дата провески вагона (в формате YYYY-MM-DDThh:mm:ss+hh:mm)
   * @param weightGross Вес брутто, т
   * @param weightTare Вес тары, т
   * @param weightTareEmpty Вес тары до выгрузки
   * @param tonnage Грузоподъёмность
   * @param waybillWagonLink Идентификатор конкретного вагона в конкретной накладной
   * @param supplierType Тип поставщика (EXTERNAL - внешний INTERNAL - внутренний)
   */
  public RecordPositions(java.lang.Integer wagonNum, java.lang.String materialCode, java.lang.String materialName, java.lang.String weighingDate, java.lang.Float weightGross, java.lang.Float weightTare, java.lang.Float weightTareEmpty, java.lang.Float tonnage, java.lang.String waybillWagonLink, nlmk.l3.transport.weighing.enum_supplierType supplierType) {
    this.wagonNum = wagonNum;
    this.materialCode = materialCode;
    this.materialName = materialName;
    this.weighingDate = weighingDate;
    this.weightGross = weightGross;
    this.weightTare = weightTare;
    this.weightTareEmpty = weightTareEmpty;
    this.tonnage = tonnage;
    this.waybillWagonLink = waybillWagonLink;
    this.supplierType = supplierType;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return wagonNum;
    case 1: return materialCode;
    case 2: return materialName;
    case 3: return weighingDate;
    case 4: return weightGross;
    case 5: return weightTare;
    case 6: return weightTareEmpty;
    case 7: return tonnage;
    case 8: return waybillWagonLink;
    case 9: return supplierType;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: wagonNum = (java.lang.Integer)value$; break;
    case 1: materialCode = value$ != null ? value$.toString() : null; break;
    case 2: materialName = value$ != null ? value$.toString() : null; break;
    case 3: weighingDate = value$ != null ? value$.toString() : null; break;
    case 4: weightGross = (java.lang.Float)value$; break;
    case 5: weightTare = (java.lang.Float)value$; break;
    case 6: weightTareEmpty = (java.lang.Float)value$; break;
    case 7: tonnage = (java.lang.Float)value$; break;
    case 8: waybillWagonLink = value$ != null ? value$.toString() : null; break;
    case 9: supplierType = (nlmk.l3.transport.weighing.enum_supplierType)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'wagonNum' field.
   * @return Номер вагона
   */
  public int getWagonNum() {
    return wagonNum;
  }


  /**
   * Sets the value of the 'wagonNum' field.
   * Номер вагона
   * @param value the value to set.
   */
  public void setWagonNum(int value) {
    this.wagonNum = value;
  }

  /**
   * Gets the value of the 'materialCode' field.
   * @return Код груза
   */
  public java.lang.String getMaterialCode() {
    return materialCode;
  }


  /**
   * Sets the value of the 'materialCode' field.
   * Код груза
   * @param value the value to set.
   */
  public void setMaterialCode(java.lang.String value) {
    this.materialCode = value;
  }

  /**
   * Gets the value of the 'materialName' field.
   * @return Наименование груза
   */
  public java.lang.String getMaterialName() {
    return materialName;
  }


  /**
   * Sets the value of the 'materialName' field.
   * Наименование груза
   * @param value the value to set.
   */
  public void setMaterialName(java.lang.String value) {
    this.materialName = value;
  }

  /**
   * Gets the value of the 'weighingDate' field.
   * @return Дата провески вагона (в формате YYYY-MM-DDThh:mm:ss+hh:mm)
   */
  public java.lang.String getWeighingDate() {
    return weighingDate;
  }


  /**
   * Sets the value of the 'weighingDate' field.
   * Дата провески вагона (в формате YYYY-MM-DDThh:mm:ss+hh:mm)
   * @param value the value to set.
   */
  public void setWeighingDate(java.lang.String value) {
    this.weighingDate = value;
  }

  /**
   * Gets the value of the 'weightGross' field.
   * @return Вес брутто, т
   */
  public float getWeightGross() {
    return weightGross;
  }


  /**
   * Sets the value of the 'weightGross' field.
   * Вес брутто, т
   * @param value the value to set.
   */
  public void setWeightGross(float value) {
    this.weightGross = value;
  }

  /**
   * Gets the value of the 'weightTare' field.
   * @return Вес тары, т
   */
  public float getWeightTare() {
    return weightTare;
  }


  /**
   * Sets the value of the 'weightTare' field.
   * Вес тары, т
   * @param value the value to set.
   */
  public void setWeightTare(float value) {
    this.weightTare = value;
  }

  /**
   * Gets the value of the 'weightTareEmpty' field.
   * @return Вес тары до выгрузки
   */
  public java.lang.Float getWeightTareEmpty() {
    return weightTareEmpty;
  }


  /**
   * Sets the value of the 'weightTareEmpty' field.
   * Вес тары до выгрузки
   * @param value the value to set.
   */
  public void setWeightTareEmpty(java.lang.Float value) {
    this.weightTareEmpty = value;
  }

  /**
   * Gets the value of the 'tonnage' field.
   * @return Грузоподъёмность
   */
  public java.lang.Float getTonnage() {
    return tonnage;
  }


  /**
   * Sets the value of the 'tonnage' field.
   * Грузоподъёмность
   * @param value the value to set.
   */
  public void setTonnage(java.lang.Float value) {
    this.tonnage = value;
  }

  /**
   * Gets the value of the 'waybillWagonLink' field.
   * @return Идентификатор конкретного вагона в конкретной накладной
   */
  public java.lang.String getWaybillWagonLink() {
    return waybillWagonLink;
  }


  /**
   * Sets the value of the 'waybillWagonLink' field.
   * Идентификатор конкретного вагона в конкретной накладной
   * @param value the value to set.
   */
  public void setWaybillWagonLink(java.lang.String value) {
    this.waybillWagonLink = value;
  }

  /**
   * Gets the value of the 'supplierType' field.
   * @return Тип поставщика (EXTERNAL - внешний INTERNAL - внутренний)
   */
  public nlmk.l3.transport.weighing.enum_supplierType getSupplierType() {
    return supplierType;
  }


  /**
   * Sets the value of the 'supplierType' field.
   * Тип поставщика (EXTERNAL - внешний INTERNAL - внутренний)
   * @param value the value to set.
   */
  public void setSupplierType(nlmk.l3.transport.weighing.enum_supplierType value) {
    this.supplierType = value;
  }

  /**
   * Creates a new RecordPositions RecordBuilder.
   * @return A new RecordPositions RecordBuilder
   */
  public static nlmk.l3.transport.weighing.RecordPositions.Builder newBuilder() {
    return new nlmk.l3.transport.weighing.RecordPositions.Builder();
  }

  /**
   * Creates a new RecordPositions RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new RecordPositions RecordBuilder
   */
  public static nlmk.l3.transport.weighing.RecordPositions.Builder newBuilder(nlmk.l3.transport.weighing.RecordPositions.Builder other) {
    if (other == null) {
      return new nlmk.l3.transport.weighing.RecordPositions.Builder();
    } else {
      return new nlmk.l3.transport.weighing.RecordPositions.Builder(other);
    }
  }

  /**
   * Creates a new RecordPositions RecordBuilder by copying an existing RecordPositions instance.
   * @param other The existing instance to copy.
   * @return A new RecordPositions RecordBuilder
   */
  public static nlmk.l3.transport.weighing.RecordPositions.Builder newBuilder(nlmk.l3.transport.weighing.RecordPositions other) {
    if (other == null) {
      return new nlmk.l3.transport.weighing.RecordPositions.Builder();
    } else {
      return new nlmk.l3.transport.weighing.RecordPositions.Builder(other);
    }
  }

  /**
   * RecordBuilder for RecordPositions instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<RecordPositions>
    implements org.apache.avro.data.RecordBuilder<RecordPositions> {

    /** Номер вагона */
    private int wagonNum;
    /** Код груза */
    private java.lang.String materialCode;
    /** Наименование груза */
    private java.lang.String materialName;
    /** Дата провески вагона (в формате YYYY-MM-DDThh:mm:ss+hh:mm) */
    private java.lang.String weighingDate;
    /** Вес брутто, т */
    private float weightGross;
    /** Вес тары, т */
    private float weightTare;
    /** Вес тары до выгрузки */
    private java.lang.Float weightTareEmpty;
    /** Грузоподъёмность */
    private java.lang.Float tonnage;
    /** Идентификатор конкретного вагона в конкретной накладной */
    private java.lang.String waybillWagonLink;
    /** Тип поставщика (EXTERNAL - внешний INTERNAL - внутренний) */
    private nlmk.l3.transport.weighing.enum_supplierType supplierType;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(nlmk.l3.transport.weighing.RecordPositions.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.wagonNum)) {
        this.wagonNum = data().deepCopy(fields()[0].schema(), other.wagonNum);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.materialCode)) {
        this.materialCode = data().deepCopy(fields()[1].schema(), other.materialCode);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.materialName)) {
        this.materialName = data().deepCopy(fields()[2].schema(), other.materialName);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.weighingDate)) {
        this.weighingDate = data().deepCopy(fields()[3].schema(), other.weighingDate);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.weightGross)) {
        this.weightGross = data().deepCopy(fields()[4].schema(), other.weightGross);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.weightTare)) {
        this.weightTare = data().deepCopy(fields()[5].schema(), other.weightTare);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.weightTareEmpty)) {
        this.weightTareEmpty = data().deepCopy(fields()[6].schema(), other.weightTareEmpty);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.tonnage)) {
        this.tonnage = data().deepCopy(fields()[7].schema(), other.tonnage);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.waybillWagonLink)) {
        this.waybillWagonLink = data().deepCopy(fields()[8].schema(), other.waybillWagonLink);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
      if (isValidValue(fields()[9], other.supplierType)) {
        this.supplierType = data().deepCopy(fields()[9].schema(), other.supplierType);
        fieldSetFlags()[9] = other.fieldSetFlags()[9];
      }
    }

    /**
     * Creates a Builder by copying an existing RecordPositions instance
     * @param other The existing instance to copy.
     */
    private Builder(nlmk.l3.transport.weighing.RecordPositions other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.wagonNum)) {
        this.wagonNum = data().deepCopy(fields()[0].schema(), other.wagonNum);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.materialCode)) {
        this.materialCode = data().deepCopy(fields()[1].schema(), other.materialCode);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.materialName)) {
        this.materialName = data().deepCopy(fields()[2].schema(), other.materialName);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.weighingDate)) {
        this.weighingDate = data().deepCopy(fields()[3].schema(), other.weighingDate);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.weightGross)) {
        this.weightGross = data().deepCopy(fields()[4].schema(), other.weightGross);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.weightTare)) {
        this.weightTare = data().deepCopy(fields()[5].schema(), other.weightTare);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.weightTareEmpty)) {
        this.weightTareEmpty = data().deepCopy(fields()[6].schema(), other.weightTareEmpty);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.tonnage)) {
        this.tonnage = data().deepCopy(fields()[7].schema(), other.tonnage);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.waybillWagonLink)) {
        this.waybillWagonLink = data().deepCopy(fields()[8].schema(), other.waybillWagonLink);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.supplierType)) {
        this.supplierType = data().deepCopy(fields()[9].schema(), other.supplierType);
        fieldSetFlags()[9] = true;
      }
    }

    /**
      * Gets the value of the 'wagonNum' field.
      * Номер вагона
      * @return The value.
      */
    public int getWagonNum() {
      return wagonNum;
    }


    /**
      * Sets the value of the 'wagonNum' field.
      * Номер вагона
      * @param value The value of 'wagonNum'.
      * @return This builder.
      */
    public nlmk.l3.transport.weighing.RecordPositions.Builder setWagonNum(int value) {
      validate(fields()[0], value);
      this.wagonNum = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'wagonNum' field has been set.
      * Номер вагона
      * @return True if the 'wagonNum' field has been set, false otherwise.
      */
    public boolean hasWagonNum() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'wagonNum' field.
      * Номер вагона
      * @return This builder.
      */
    public nlmk.l3.transport.weighing.RecordPositions.Builder clearWagonNum() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'materialCode' field.
      * Код груза
      * @return The value.
      */
    public java.lang.String getMaterialCode() {
      return materialCode;
    }


    /**
      * Sets the value of the 'materialCode' field.
      * Код груза
      * @param value The value of 'materialCode'.
      * @return This builder.
      */
    public nlmk.l3.transport.weighing.RecordPositions.Builder setMaterialCode(java.lang.String value) {
      validate(fields()[1], value);
      this.materialCode = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'materialCode' field has been set.
      * Код груза
      * @return True if the 'materialCode' field has been set, false otherwise.
      */
    public boolean hasMaterialCode() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'materialCode' field.
      * Код груза
      * @return This builder.
      */
    public nlmk.l3.transport.weighing.RecordPositions.Builder clearMaterialCode() {
      materialCode = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'materialName' field.
      * Наименование груза
      * @return The value.
      */
    public java.lang.String getMaterialName() {
      return materialName;
    }


    /**
      * Sets the value of the 'materialName' field.
      * Наименование груза
      * @param value The value of 'materialName'.
      * @return This builder.
      */
    public nlmk.l3.transport.weighing.RecordPositions.Builder setMaterialName(java.lang.String value) {
      validate(fields()[2], value);
      this.materialName = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'materialName' field has been set.
      * Наименование груза
      * @return True if the 'materialName' field has been set, false otherwise.
      */
    public boolean hasMaterialName() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'materialName' field.
      * Наименование груза
      * @return This builder.
      */
    public nlmk.l3.transport.weighing.RecordPositions.Builder clearMaterialName() {
      materialName = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'weighingDate' field.
      * Дата провески вагона (в формате YYYY-MM-DDThh:mm:ss+hh:mm)
      * @return The value.
      */
    public java.lang.String getWeighingDate() {
      return weighingDate;
    }


    /**
      * Sets the value of the 'weighingDate' field.
      * Дата провески вагона (в формате YYYY-MM-DDThh:mm:ss+hh:mm)
      * @param value The value of 'weighingDate'.
      * @return This builder.
      */
    public nlmk.l3.transport.weighing.RecordPositions.Builder setWeighingDate(java.lang.String value) {
      validate(fields()[3], value);
      this.weighingDate = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'weighingDate' field has been set.
      * Дата провески вагона (в формате YYYY-MM-DDThh:mm:ss+hh:mm)
      * @return True if the 'weighingDate' field has been set, false otherwise.
      */
    public boolean hasWeighingDate() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'weighingDate' field.
      * Дата провески вагона (в формате YYYY-MM-DDThh:mm:ss+hh:mm)
      * @return This builder.
      */
    public nlmk.l3.transport.weighing.RecordPositions.Builder clearWeighingDate() {
      weighingDate = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'weightGross' field.
      * Вес брутто, т
      * @return The value.
      */
    public float getWeightGross() {
      return weightGross;
    }


    /**
      * Sets the value of the 'weightGross' field.
      * Вес брутто, т
      * @param value The value of 'weightGross'.
      * @return This builder.
      */
    public nlmk.l3.transport.weighing.RecordPositions.Builder setWeightGross(float value) {
      validate(fields()[4], value);
      this.weightGross = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'weightGross' field has been set.
      * Вес брутто, т
      * @return True if the 'weightGross' field has been set, false otherwise.
      */
    public boolean hasWeightGross() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'weightGross' field.
      * Вес брутто, т
      * @return This builder.
      */
    public nlmk.l3.transport.weighing.RecordPositions.Builder clearWeightGross() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'weightTare' field.
      * Вес тары, т
      * @return The value.
      */
    public float getWeightTare() {
      return weightTare;
    }


    /**
      * Sets the value of the 'weightTare' field.
      * Вес тары, т
      * @param value The value of 'weightTare'.
      * @return This builder.
      */
    public nlmk.l3.transport.weighing.RecordPositions.Builder setWeightTare(float value) {
      validate(fields()[5], value);
      this.weightTare = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'weightTare' field has been set.
      * Вес тары, т
      * @return True if the 'weightTare' field has been set, false otherwise.
      */
    public boolean hasWeightTare() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'weightTare' field.
      * Вес тары, т
      * @return This builder.
      */
    public nlmk.l3.transport.weighing.RecordPositions.Builder clearWeightTare() {
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'weightTareEmpty' field.
      * Вес тары до выгрузки
      * @return The value.
      */
    public java.lang.Float getWeightTareEmpty() {
      return weightTareEmpty;
    }


    /**
      * Sets the value of the 'weightTareEmpty' field.
      * Вес тары до выгрузки
      * @param value The value of 'weightTareEmpty'.
      * @return This builder.
      */
    public nlmk.l3.transport.weighing.RecordPositions.Builder setWeightTareEmpty(java.lang.Float value) {
      validate(fields()[6], value);
      this.weightTareEmpty = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'weightTareEmpty' field has been set.
      * Вес тары до выгрузки
      * @return True if the 'weightTareEmpty' field has been set, false otherwise.
      */
    public boolean hasWeightTareEmpty() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'weightTareEmpty' field.
      * Вес тары до выгрузки
      * @return This builder.
      */
    public nlmk.l3.transport.weighing.RecordPositions.Builder clearWeightTareEmpty() {
      weightTareEmpty = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'tonnage' field.
      * Грузоподъёмность
      * @return The value.
      */
    public java.lang.Float getTonnage() {
      return tonnage;
    }


    /**
      * Sets the value of the 'tonnage' field.
      * Грузоподъёмность
      * @param value The value of 'tonnage'.
      * @return This builder.
      */
    public nlmk.l3.transport.weighing.RecordPositions.Builder setTonnage(java.lang.Float value) {
      validate(fields()[7], value);
      this.tonnage = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'tonnage' field has been set.
      * Грузоподъёмность
      * @return True if the 'tonnage' field has been set, false otherwise.
      */
    public boolean hasTonnage() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'tonnage' field.
      * Грузоподъёмность
      * @return This builder.
      */
    public nlmk.l3.transport.weighing.RecordPositions.Builder clearTonnage() {
      tonnage = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'waybillWagonLink' field.
      * Идентификатор конкретного вагона в конкретной накладной
      * @return The value.
      */
    public java.lang.String getWaybillWagonLink() {
      return waybillWagonLink;
    }


    /**
      * Sets the value of the 'waybillWagonLink' field.
      * Идентификатор конкретного вагона в конкретной накладной
      * @param value The value of 'waybillWagonLink'.
      * @return This builder.
      */
    public nlmk.l3.transport.weighing.RecordPositions.Builder setWaybillWagonLink(java.lang.String value) {
      validate(fields()[8], value);
      this.waybillWagonLink = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'waybillWagonLink' field has been set.
      * Идентификатор конкретного вагона в конкретной накладной
      * @return True if the 'waybillWagonLink' field has been set, false otherwise.
      */
    public boolean hasWaybillWagonLink() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'waybillWagonLink' field.
      * Идентификатор конкретного вагона в конкретной накладной
      * @return This builder.
      */
    public nlmk.l3.transport.weighing.RecordPositions.Builder clearWaybillWagonLink() {
      waybillWagonLink = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'supplierType' field.
      * Тип поставщика (EXTERNAL - внешний INTERNAL - внутренний)
      * @return The value.
      */
    public nlmk.l3.transport.weighing.enum_supplierType getSupplierType() {
      return supplierType;
    }


    /**
      * Sets the value of the 'supplierType' field.
      * Тип поставщика (EXTERNAL - внешний INTERNAL - внутренний)
      * @param value The value of 'supplierType'.
      * @return This builder.
      */
    public nlmk.l3.transport.weighing.RecordPositions.Builder setSupplierType(nlmk.l3.transport.weighing.enum_supplierType value) {
      validate(fields()[9], value);
      this.supplierType = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'supplierType' field has been set.
      * Тип поставщика (EXTERNAL - внешний INTERNAL - внутренний)
      * @return True if the 'supplierType' field has been set, false otherwise.
      */
    public boolean hasSupplierType() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'supplierType' field.
      * Тип поставщика (EXTERNAL - внешний INTERNAL - внутренний)
      * @return This builder.
      */
    public nlmk.l3.transport.weighing.RecordPositions.Builder clearSupplierType() {
      supplierType = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public RecordPositions build() {
      try {
        RecordPositions record = new RecordPositions();
        record.wagonNum = fieldSetFlags()[0] ? this.wagonNum : (java.lang.Integer) defaultValue(fields()[0]);
        record.materialCode = fieldSetFlags()[1] ? this.materialCode : (java.lang.String) defaultValue(fields()[1]);
        record.materialName = fieldSetFlags()[2] ? this.materialName : (java.lang.String) defaultValue(fields()[2]);
        record.weighingDate = fieldSetFlags()[3] ? this.weighingDate : (java.lang.String) defaultValue(fields()[3]);
        record.weightGross = fieldSetFlags()[4] ? this.weightGross : (java.lang.Float) defaultValue(fields()[4]);
        record.weightTare = fieldSetFlags()[5] ? this.weightTare : (java.lang.Float) defaultValue(fields()[5]);
        record.weightTareEmpty = fieldSetFlags()[6] ? this.weightTareEmpty : (java.lang.Float) defaultValue(fields()[6]);
        record.tonnage = fieldSetFlags()[7] ? this.tonnage : (java.lang.Float) defaultValue(fields()[7]);
        record.waybillWagonLink = fieldSetFlags()[8] ? this.waybillWagonLink : (java.lang.String) defaultValue(fields()[8]);
        record.supplierType = fieldSetFlags()[9] ? this.supplierType : (nlmk.l3.transport.weighing.enum_supplierType) defaultValue(fields()[9]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<RecordPositions>
    WRITER$ = (org.apache.avro.io.DatumWriter<RecordPositions>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<RecordPositions>
    READER$ = (org.apache.avro.io.DatumReader<RecordPositions>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeInt(this.wagonNum);

    out.writeString(this.materialCode);

    out.writeString(this.materialName);

    out.writeString(this.weighingDate);

    out.writeFloat(this.weightGross);

    out.writeFloat(this.weightTare);

    if (this.weightTareEmpty == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeFloat(this.weightTareEmpty);
    }

    if (this.tonnage == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeFloat(this.tonnage);
    }

    out.writeString(this.waybillWagonLink);

    out.writeEnum(this.supplierType.ordinal());

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.wagonNum = in.readInt();

      this.materialCode = in.readString();

      this.materialName = in.readString();

      this.weighingDate = in.readString();

      this.weightGross = in.readFloat();

      this.weightTare = in.readFloat();

      if (in.readIndex() != 1) {
        in.readNull();
        this.weightTareEmpty = null;
      } else {
        this.weightTareEmpty = in.readFloat();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.tonnage = null;
      } else {
        this.tonnage = in.readFloat();
      }

      this.waybillWagonLink = in.readString();

      this.supplierType = nlmk.l3.transport.weighing.enum_supplierType.values()[in.readEnum()];

    } else {
      for (int i = 0; i < 10; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.wagonNum = in.readInt();
          break;

        case 1:
          this.materialCode = in.readString();
          break;

        case 2:
          this.materialName = in.readString();
          break;

        case 3:
          this.weighingDate = in.readString();
          break;

        case 4:
          this.weightGross = in.readFloat();
          break;

        case 5:
          this.weightTare = in.readFloat();
          break;

        case 6:
          if (in.readIndex() != 1) {
            in.readNull();
            this.weightTareEmpty = null;
          } else {
            this.weightTareEmpty = in.readFloat();
          }
          break;

        case 7:
          if (in.readIndex() != 1) {
            in.readNull();
            this.tonnage = null;
          } else {
            this.tonnage = in.readFloat();
          }
          break;

        case 8:
          this.waybillWagonLink = in.readString();
          break;

        case 9:
          this.supplierType = nlmk.l3.transport.weighing.enum_supplierType.values()[in.readEnum()];
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










