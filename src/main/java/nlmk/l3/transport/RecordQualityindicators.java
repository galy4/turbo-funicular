/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package nlmk.l3.transport;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class RecordQualityindicators extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -3282711064518025060L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"RecordQualityindicators\",\"namespace\":\"nlmk.l3.transport\",\"fields\":[{\"name\":\"qualityIndicatorCode\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Код показателя качества\"},{\"name\":\"qualityIndicatorName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Наименование показателя качества\"},{\"name\":\"qualityIndicatorType\",\"type\":\"int\",\"doc\":\"Тип данных показателя качества\"},{\"name\":\"qualityIndicatorTypeName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Наименование типа данных показателя качества\"},{\"name\":\"qualityIndicatorValue\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Значение показателя качества\"},{\"name\":\"qualityIndicatorFormat\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Формат передачи показателя качества\"},{\"name\":\"qualityIndicatorMeasure\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Единица измерения\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<RecordQualityindicators> ENCODER =
      new BinaryMessageEncoder<RecordQualityindicators>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<RecordQualityindicators> DECODER =
      new BinaryMessageDecoder<RecordQualityindicators>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<RecordQualityindicators> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<RecordQualityindicators> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<RecordQualityindicators> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<RecordQualityindicators>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this RecordQualityindicators to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a RecordQualityindicators from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a RecordQualityindicators instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static RecordQualityindicators fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Код показателя качества */
   private java.lang.String qualityIndicatorCode;
  /** Наименование показателя качества */
   private java.lang.String qualityIndicatorName;
  /** Тип данных показателя качества */
   private int qualityIndicatorType;
  /** Наименование типа данных показателя качества */
   private java.lang.String qualityIndicatorTypeName;
  /** Значение показателя качества */
   private java.lang.String qualityIndicatorValue;
  /** Формат передачи показателя качества */
   private java.lang.String qualityIndicatorFormat;
  /** Единица измерения */
   private java.lang.String qualityIndicatorMeasure;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public RecordQualityindicators() {}

  /**
   * All-args constructor.
   * @param qualityIndicatorCode Код показателя качества
   * @param qualityIndicatorName Наименование показателя качества
   * @param qualityIndicatorType Тип данных показателя качества
   * @param qualityIndicatorTypeName Наименование типа данных показателя качества
   * @param qualityIndicatorValue Значение показателя качества
   * @param qualityIndicatorFormat Формат передачи показателя качества
   * @param qualityIndicatorMeasure Единица измерения
   */
  public RecordQualityindicators(java.lang.String qualityIndicatorCode, java.lang.String qualityIndicatorName, java.lang.Integer qualityIndicatorType, java.lang.String qualityIndicatorTypeName, java.lang.String qualityIndicatorValue, java.lang.String qualityIndicatorFormat, java.lang.String qualityIndicatorMeasure) {
    this.qualityIndicatorCode = qualityIndicatorCode;
    this.qualityIndicatorName = qualityIndicatorName;
    this.qualityIndicatorType = qualityIndicatorType;
    this.qualityIndicatorTypeName = qualityIndicatorTypeName;
    this.qualityIndicatorValue = qualityIndicatorValue;
    this.qualityIndicatorFormat = qualityIndicatorFormat;
    this.qualityIndicatorMeasure = qualityIndicatorMeasure;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return qualityIndicatorCode;
    case 1: return qualityIndicatorName;
    case 2: return qualityIndicatorType;
    case 3: return qualityIndicatorTypeName;
    case 4: return qualityIndicatorValue;
    case 5: return qualityIndicatorFormat;
    case 6: return qualityIndicatorMeasure;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: qualityIndicatorCode = value$ != null ? value$.toString() : null; break;
    case 1: qualityIndicatorName = value$ != null ? value$.toString() : null; break;
    case 2: qualityIndicatorType = (java.lang.Integer)value$; break;
    case 3: qualityIndicatorTypeName = value$ != null ? value$.toString() : null; break;
    case 4: qualityIndicatorValue = value$ != null ? value$.toString() : null; break;
    case 5: qualityIndicatorFormat = value$ != null ? value$.toString() : null; break;
    case 6: qualityIndicatorMeasure = value$ != null ? value$.toString() : null; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'qualityIndicatorCode' field.
   * @return Код показателя качества
   */
  public java.lang.String getQualityIndicatorCode() {
    return qualityIndicatorCode;
  }


  /**
   * Sets the value of the 'qualityIndicatorCode' field.
   * Код показателя качества
   * @param value the value to set.
   */
  public void setQualityIndicatorCode(java.lang.String value) {
    this.qualityIndicatorCode = value;
  }

  /**
   * Gets the value of the 'qualityIndicatorName' field.
   * @return Наименование показателя качества
   */
  public java.lang.String getQualityIndicatorName() {
    return qualityIndicatorName;
  }


  /**
   * Sets the value of the 'qualityIndicatorName' field.
   * Наименование показателя качества
   * @param value the value to set.
   */
  public void setQualityIndicatorName(java.lang.String value) {
    this.qualityIndicatorName = value;
  }

  /**
   * Gets the value of the 'qualityIndicatorType' field.
   * @return Тип данных показателя качества
   */
  public int getQualityIndicatorType() {
    return qualityIndicatorType;
  }


  /**
   * Sets the value of the 'qualityIndicatorType' field.
   * Тип данных показателя качества
   * @param value the value to set.
   */
  public void setQualityIndicatorType(int value) {
    this.qualityIndicatorType = value;
  }

  /**
   * Gets the value of the 'qualityIndicatorTypeName' field.
   * @return Наименование типа данных показателя качества
   */
  public java.lang.String getQualityIndicatorTypeName() {
    return qualityIndicatorTypeName;
  }


  /**
   * Sets the value of the 'qualityIndicatorTypeName' field.
   * Наименование типа данных показателя качества
   * @param value the value to set.
   */
  public void setQualityIndicatorTypeName(java.lang.String value) {
    this.qualityIndicatorTypeName = value;
  }

  /**
   * Gets the value of the 'qualityIndicatorValue' field.
   * @return Значение показателя качества
   */
  public java.lang.String getQualityIndicatorValue() {
    return qualityIndicatorValue;
  }


  /**
   * Sets the value of the 'qualityIndicatorValue' field.
   * Значение показателя качества
   * @param value the value to set.
   */
  public void setQualityIndicatorValue(java.lang.String value) {
    this.qualityIndicatorValue = value;
  }

  /**
   * Gets the value of the 'qualityIndicatorFormat' field.
   * @return Формат передачи показателя качества
   */
  public java.lang.String getQualityIndicatorFormat() {
    return qualityIndicatorFormat;
  }


  /**
   * Sets the value of the 'qualityIndicatorFormat' field.
   * Формат передачи показателя качества
   * @param value the value to set.
   */
  public void setQualityIndicatorFormat(java.lang.String value) {
    this.qualityIndicatorFormat = value;
  }

  /**
   * Gets the value of the 'qualityIndicatorMeasure' field.
   * @return Единица измерения
   */
  public java.lang.String getQualityIndicatorMeasure() {
    return qualityIndicatorMeasure;
  }


  /**
   * Sets the value of the 'qualityIndicatorMeasure' field.
   * Единица измерения
   * @param value the value to set.
   */
  public void setQualityIndicatorMeasure(java.lang.String value) {
    this.qualityIndicatorMeasure = value;
  }

  /**
   * Creates a new RecordQualityindicators RecordBuilder.
   * @return A new RecordQualityindicators RecordBuilder
   */
  public static nlmk.l3.transport.RecordQualityindicators.Builder newBuilder() {
    return new nlmk.l3.transport.RecordQualityindicators.Builder();
  }

  /**
   * Creates a new RecordQualityindicators RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new RecordQualityindicators RecordBuilder
   */
  public static nlmk.l3.transport.RecordQualityindicators.Builder newBuilder(nlmk.l3.transport.RecordQualityindicators.Builder other) {
    if (other == null) {
      return new nlmk.l3.transport.RecordQualityindicators.Builder();
    } else {
      return new nlmk.l3.transport.RecordQualityindicators.Builder(other);
    }
  }

  /**
   * Creates a new RecordQualityindicators RecordBuilder by copying an existing RecordQualityindicators instance.
   * @param other The existing instance to copy.
   * @return A new RecordQualityindicators RecordBuilder
   */
  public static nlmk.l3.transport.RecordQualityindicators.Builder newBuilder(nlmk.l3.transport.RecordQualityindicators other) {
    if (other == null) {
      return new nlmk.l3.transport.RecordQualityindicators.Builder();
    } else {
      return new nlmk.l3.transport.RecordQualityindicators.Builder(other);
    }
  }

  /**
   * RecordBuilder for RecordQualityindicators instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<RecordQualityindicators>
    implements org.apache.avro.data.RecordBuilder<RecordQualityindicators> {

    /** Код показателя качества */
    private java.lang.String qualityIndicatorCode;
    /** Наименование показателя качества */
    private java.lang.String qualityIndicatorName;
    /** Тип данных показателя качества */
    private int qualityIndicatorType;
    /** Наименование типа данных показателя качества */
    private java.lang.String qualityIndicatorTypeName;
    /** Значение показателя качества */
    private java.lang.String qualityIndicatorValue;
    /** Формат передачи показателя качества */
    private java.lang.String qualityIndicatorFormat;
    /** Единица измерения */
    private java.lang.String qualityIndicatorMeasure;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(nlmk.l3.transport.RecordQualityindicators.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.qualityIndicatorCode)) {
        this.qualityIndicatorCode = data().deepCopy(fields()[0].schema(), other.qualityIndicatorCode);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.qualityIndicatorName)) {
        this.qualityIndicatorName = data().deepCopy(fields()[1].schema(), other.qualityIndicatorName);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.qualityIndicatorType)) {
        this.qualityIndicatorType = data().deepCopy(fields()[2].schema(), other.qualityIndicatorType);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.qualityIndicatorTypeName)) {
        this.qualityIndicatorTypeName = data().deepCopy(fields()[3].schema(), other.qualityIndicatorTypeName);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.qualityIndicatorValue)) {
        this.qualityIndicatorValue = data().deepCopy(fields()[4].schema(), other.qualityIndicatorValue);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.qualityIndicatorFormat)) {
        this.qualityIndicatorFormat = data().deepCopy(fields()[5].schema(), other.qualityIndicatorFormat);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.qualityIndicatorMeasure)) {
        this.qualityIndicatorMeasure = data().deepCopy(fields()[6].schema(), other.qualityIndicatorMeasure);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
    }

    /**
     * Creates a Builder by copying an existing RecordQualityindicators instance
     * @param other The existing instance to copy.
     */
    private Builder(nlmk.l3.transport.RecordQualityindicators other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.qualityIndicatorCode)) {
        this.qualityIndicatorCode = data().deepCopy(fields()[0].schema(), other.qualityIndicatorCode);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.qualityIndicatorName)) {
        this.qualityIndicatorName = data().deepCopy(fields()[1].schema(), other.qualityIndicatorName);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.qualityIndicatorType)) {
        this.qualityIndicatorType = data().deepCopy(fields()[2].schema(), other.qualityIndicatorType);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.qualityIndicatorTypeName)) {
        this.qualityIndicatorTypeName = data().deepCopy(fields()[3].schema(), other.qualityIndicatorTypeName);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.qualityIndicatorValue)) {
        this.qualityIndicatorValue = data().deepCopy(fields()[4].schema(), other.qualityIndicatorValue);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.qualityIndicatorFormat)) {
        this.qualityIndicatorFormat = data().deepCopy(fields()[5].schema(), other.qualityIndicatorFormat);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.qualityIndicatorMeasure)) {
        this.qualityIndicatorMeasure = data().deepCopy(fields()[6].schema(), other.qualityIndicatorMeasure);
        fieldSetFlags()[6] = true;
      }
    }

    /**
      * Gets the value of the 'qualityIndicatorCode' field.
      * Код показателя качества
      * @return The value.
      */
    public java.lang.String getQualityIndicatorCode() {
      return qualityIndicatorCode;
    }


    /**
      * Sets the value of the 'qualityIndicatorCode' field.
      * Код показателя качества
      * @param value The value of 'qualityIndicatorCode'.
      * @return This builder.
      */
    public nlmk.l3.transport.RecordQualityindicators.Builder setQualityIndicatorCode(java.lang.String value) {
      validate(fields()[0], value);
      this.qualityIndicatorCode = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'qualityIndicatorCode' field has been set.
      * Код показателя качества
      * @return True if the 'qualityIndicatorCode' field has been set, false otherwise.
      */
    public boolean hasQualityIndicatorCode() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'qualityIndicatorCode' field.
      * Код показателя качества
      * @return This builder.
      */
    public nlmk.l3.transport.RecordQualityindicators.Builder clearQualityIndicatorCode() {
      qualityIndicatorCode = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'qualityIndicatorName' field.
      * Наименование показателя качества
      * @return The value.
      */
    public java.lang.String getQualityIndicatorName() {
      return qualityIndicatorName;
    }


    /**
      * Sets the value of the 'qualityIndicatorName' field.
      * Наименование показателя качества
      * @param value The value of 'qualityIndicatorName'.
      * @return This builder.
      */
    public nlmk.l3.transport.RecordQualityindicators.Builder setQualityIndicatorName(java.lang.String value) {
      validate(fields()[1], value);
      this.qualityIndicatorName = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'qualityIndicatorName' field has been set.
      * Наименование показателя качества
      * @return True if the 'qualityIndicatorName' field has been set, false otherwise.
      */
    public boolean hasQualityIndicatorName() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'qualityIndicatorName' field.
      * Наименование показателя качества
      * @return This builder.
      */
    public nlmk.l3.transport.RecordQualityindicators.Builder clearQualityIndicatorName() {
      qualityIndicatorName = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'qualityIndicatorType' field.
      * Тип данных показателя качества
      * @return The value.
      */
    public int getQualityIndicatorType() {
      return qualityIndicatorType;
    }


    /**
      * Sets the value of the 'qualityIndicatorType' field.
      * Тип данных показателя качества
      * @param value The value of 'qualityIndicatorType'.
      * @return This builder.
      */
    public nlmk.l3.transport.RecordQualityindicators.Builder setQualityIndicatorType(int value) {
      validate(fields()[2], value);
      this.qualityIndicatorType = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'qualityIndicatorType' field has been set.
      * Тип данных показателя качества
      * @return True if the 'qualityIndicatorType' field has been set, false otherwise.
      */
    public boolean hasQualityIndicatorType() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'qualityIndicatorType' field.
      * Тип данных показателя качества
      * @return This builder.
      */
    public nlmk.l3.transport.RecordQualityindicators.Builder clearQualityIndicatorType() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'qualityIndicatorTypeName' field.
      * Наименование типа данных показателя качества
      * @return The value.
      */
    public java.lang.String getQualityIndicatorTypeName() {
      return qualityIndicatorTypeName;
    }


    /**
      * Sets the value of the 'qualityIndicatorTypeName' field.
      * Наименование типа данных показателя качества
      * @param value The value of 'qualityIndicatorTypeName'.
      * @return This builder.
      */
    public nlmk.l3.transport.RecordQualityindicators.Builder setQualityIndicatorTypeName(java.lang.String value) {
      validate(fields()[3], value);
      this.qualityIndicatorTypeName = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'qualityIndicatorTypeName' field has been set.
      * Наименование типа данных показателя качества
      * @return True if the 'qualityIndicatorTypeName' field has been set, false otherwise.
      */
    public boolean hasQualityIndicatorTypeName() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'qualityIndicatorTypeName' field.
      * Наименование типа данных показателя качества
      * @return This builder.
      */
    public nlmk.l3.transport.RecordQualityindicators.Builder clearQualityIndicatorTypeName() {
      qualityIndicatorTypeName = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'qualityIndicatorValue' field.
      * Значение показателя качества
      * @return The value.
      */
    public java.lang.String getQualityIndicatorValue() {
      return qualityIndicatorValue;
    }


    /**
      * Sets the value of the 'qualityIndicatorValue' field.
      * Значение показателя качества
      * @param value The value of 'qualityIndicatorValue'.
      * @return This builder.
      */
    public nlmk.l3.transport.RecordQualityindicators.Builder setQualityIndicatorValue(java.lang.String value) {
      validate(fields()[4], value);
      this.qualityIndicatorValue = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'qualityIndicatorValue' field has been set.
      * Значение показателя качества
      * @return True if the 'qualityIndicatorValue' field has been set, false otherwise.
      */
    public boolean hasQualityIndicatorValue() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'qualityIndicatorValue' field.
      * Значение показателя качества
      * @return This builder.
      */
    public nlmk.l3.transport.RecordQualityindicators.Builder clearQualityIndicatorValue() {
      qualityIndicatorValue = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'qualityIndicatorFormat' field.
      * Формат передачи показателя качества
      * @return The value.
      */
    public java.lang.String getQualityIndicatorFormat() {
      return qualityIndicatorFormat;
    }


    /**
      * Sets the value of the 'qualityIndicatorFormat' field.
      * Формат передачи показателя качества
      * @param value The value of 'qualityIndicatorFormat'.
      * @return This builder.
      */
    public nlmk.l3.transport.RecordQualityindicators.Builder setQualityIndicatorFormat(java.lang.String value) {
      validate(fields()[5], value);
      this.qualityIndicatorFormat = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'qualityIndicatorFormat' field has been set.
      * Формат передачи показателя качества
      * @return True if the 'qualityIndicatorFormat' field has been set, false otherwise.
      */
    public boolean hasQualityIndicatorFormat() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'qualityIndicatorFormat' field.
      * Формат передачи показателя качества
      * @return This builder.
      */
    public nlmk.l3.transport.RecordQualityindicators.Builder clearQualityIndicatorFormat() {
      qualityIndicatorFormat = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'qualityIndicatorMeasure' field.
      * Единица измерения
      * @return The value.
      */
    public java.lang.String getQualityIndicatorMeasure() {
      return qualityIndicatorMeasure;
    }


    /**
      * Sets the value of the 'qualityIndicatorMeasure' field.
      * Единица измерения
      * @param value The value of 'qualityIndicatorMeasure'.
      * @return This builder.
      */
    public nlmk.l3.transport.RecordQualityindicators.Builder setQualityIndicatorMeasure(java.lang.String value) {
      validate(fields()[6], value);
      this.qualityIndicatorMeasure = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'qualityIndicatorMeasure' field has been set.
      * Единица измерения
      * @return True if the 'qualityIndicatorMeasure' field has been set, false otherwise.
      */
    public boolean hasQualityIndicatorMeasure() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'qualityIndicatorMeasure' field.
      * Единица измерения
      * @return This builder.
      */
    public nlmk.l3.transport.RecordQualityindicators.Builder clearQualityIndicatorMeasure() {
      qualityIndicatorMeasure = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public RecordQualityindicators build() {
      try {
        RecordQualityindicators record = new RecordQualityindicators();
        record.qualityIndicatorCode = fieldSetFlags()[0] ? this.qualityIndicatorCode : (java.lang.String) defaultValue(fields()[0]);
        record.qualityIndicatorName = fieldSetFlags()[1] ? this.qualityIndicatorName : (java.lang.String) defaultValue(fields()[1]);
        record.qualityIndicatorType = fieldSetFlags()[2] ? this.qualityIndicatorType : (java.lang.Integer) defaultValue(fields()[2]);
        record.qualityIndicatorTypeName = fieldSetFlags()[3] ? this.qualityIndicatorTypeName : (java.lang.String) defaultValue(fields()[3]);
        record.qualityIndicatorValue = fieldSetFlags()[4] ? this.qualityIndicatorValue : (java.lang.String) defaultValue(fields()[4]);
        record.qualityIndicatorFormat = fieldSetFlags()[5] ? this.qualityIndicatorFormat : (java.lang.String) defaultValue(fields()[5]);
        record.qualityIndicatorMeasure = fieldSetFlags()[6] ? this.qualityIndicatorMeasure : (java.lang.String) defaultValue(fields()[6]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<RecordQualityindicators>
    WRITER$ = (org.apache.avro.io.DatumWriter<RecordQualityindicators>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<RecordQualityindicators>
    READER$ = (org.apache.avro.io.DatumReader<RecordQualityindicators>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.qualityIndicatorCode);

    out.writeString(this.qualityIndicatorName);

    out.writeInt(this.qualityIndicatorType);

    out.writeString(this.qualityIndicatorTypeName);

    out.writeString(this.qualityIndicatorValue);

    if (this.qualityIndicatorFormat == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.qualityIndicatorFormat);
    }

    if (this.qualityIndicatorMeasure == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.qualityIndicatorMeasure);
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.qualityIndicatorCode = in.readString();

      this.qualityIndicatorName = in.readString();

      this.qualityIndicatorType = in.readInt();

      this.qualityIndicatorTypeName = in.readString();

      this.qualityIndicatorValue = in.readString();

      if (in.readIndex() != 1) {
        in.readNull();
        this.qualityIndicatorFormat = null;
      } else {
        this.qualityIndicatorFormat = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.qualityIndicatorMeasure = null;
      } else {
        this.qualityIndicatorMeasure = in.readString();
      }

    } else {
      for (int i = 0; i < 7; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.qualityIndicatorCode = in.readString();
          break;

        case 1:
          this.qualityIndicatorName = in.readString();
          break;

        case 2:
          this.qualityIndicatorType = in.readInt();
          break;

        case 3:
          this.qualityIndicatorTypeName = in.readString();
          break;

        case 4:
          this.qualityIndicatorValue = in.readString();
          break;

        case 5:
          if (in.readIndex() != 1) {
            in.readNull();
            this.qualityIndicatorFormat = null;
          } else {
            this.qualityIndicatorFormat = in.readString();
          }
          break;

        case 6:
          if (in.readIndex() != 1) {
            in.readNull();
            this.qualityIndicatorMeasure = null;
          } else {
            this.qualityIndicatorMeasure = in.readString();
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










