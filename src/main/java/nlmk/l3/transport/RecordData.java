/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package nlmk.l3.transport;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

/** Список передаваемых данных */
@org.apache.avro.specific.AvroGenerated
public class RecordData extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -4080842272013885998L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"RecordData\",\"namespace\":\"nlmk.l3.transport\",\"doc\":\"Список передаваемых данных\",\"fields\":[{\"name\":\"certNum\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Номер сертификата качества\"},{\"name\":\"certDate\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Дата сертификата качества в формате YYYY-MM-DD\"},{\"name\":\"supplierCode\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Код внешнего поставщика\"},{\"name\":\"supplierName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Наименование внешнего поставщика\"},{\"name\":\"materialCode\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Код ресурса\"},{\"name\":\"materialName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Наименование ресурса (сырья)\"},{\"name\":\"materialOZM\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"ОЗМ материального ресурса\"},{\"name\":\"standart\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Наименование нормативного документа\"},{\"name\":\"lotNum\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Номер партии\"},{\"name\":\"shipmentOperDate\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Дата отгрузки в формате YYYY-MM-DD\"},{\"name\":\"vehicles\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"RecordVehicles\",\"fields\":[{\"name\":\"vehicleNum\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Номер средства транспортировки\"},{\"name\":\"weightNet\",\"type\":\"float\",\"doc\":\"Вес ресурса\"},{\"name\":\"waybillNum\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Номер накладной\"}]}},\"doc\":\"Средства транспортировки\"},{\"name\":\"qualityIndicators\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"RecordQualityindicators\",\"fields\":[{\"name\":\"qualityIndicatorCode\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Код показателя качества\"},{\"name\":\"qualityIndicatorName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Наименование показателя качества\"},{\"name\":\"qualityIndicatorType\",\"type\":\"int\",\"doc\":\"Тип данных показателя качества\"},{\"name\":\"qualityIndicatorTypeName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Наименование типа данных показателя качества\"},{\"name\":\"qualityIndicatorValue\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Значение показателя качества\"},{\"name\":\"qualityIndicatorFormat\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Формат передачи показателя качества\"},{\"name\":\"qualityIndicatorMeasure\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Единица измерения\"}]}},\"doc\":\"Показатели качества\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<RecordData> ENCODER =
      new BinaryMessageEncoder<RecordData>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<RecordData> DECODER =
      new BinaryMessageDecoder<RecordData>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<RecordData> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<RecordData> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<RecordData> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<RecordData>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this RecordData to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a RecordData from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a RecordData instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static RecordData fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Номер сертификата качества */
   private java.lang.String certNum;
  /** Дата сертификата качества в формате YYYY-MM-DD */
   private java.lang.String certDate;
  /** Код внешнего поставщика */
   private java.lang.String supplierCode;
  /** Наименование внешнего поставщика */
   private java.lang.String supplierName;
  /** Код ресурса */
   private java.lang.String materialCode;
  /** Наименование ресурса (сырья) */
   private java.lang.String materialName;
  /** ОЗМ материального ресурса */
   private java.lang.String materialOZM;
  /** Наименование нормативного документа */
   private java.lang.String standart;
  /** Номер партии */
   private java.lang.String lotNum;
  /** Дата отгрузки в формате YYYY-MM-DD */
   private java.lang.String shipmentOperDate;
  /** Средства транспортировки */
   private java.util.List<nlmk.l3.transport.RecordVehicles> vehicles;
  /** Показатели качества */
   private java.util.List<nlmk.l3.transport.RecordQualityindicators> qualityIndicators;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public RecordData() {}

  /**
   * All-args constructor.
   * @param certNum Номер сертификата качества
   * @param certDate Дата сертификата качества в формате YYYY-MM-DD
   * @param supplierCode Код внешнего поставщика
   * @param supplierName Наименование внешнего поставщика
   * @param materialCode Код ресурса
   * @param materialName Наименование ресурса (сырья)
   * @param materialOZM ОЗМ материального ресурса
   * @param standart Наименование нормативного документа
   * @param lotNum Номер партии
   * @param shipmentOperDate Дата отгрузки в формате YYYY-MM-DD
   * @param vehicles Средства транспортировки
   * @param qualityIndicators Показатели качества
   */
  public RecordData(java.lang.String certNum, java.lang.String certDate, java.lang.String supplierCode, java.lang.String supplierName, java.lang.String materialCode, java.lang.String materialName, java.lang.String materialOZM, java.lang.String standart, java.lang.String lotNum, java.lang.String shipmentOperDate, java.util.List<nlmk.l3.transport.RecordVehicles> vehicles, java.util.List<nlmk.l3.transport.RecordQualityindicators> qualityIndicators) {
    this.certNum = certNum;
    this.certDate = certDate;
    this.supplierCode = supplierCode;
    this.supplierName = supplierName;
    this.materialCode = materialCode;
    this.materialName = materialName;
    this.materialOZM = materialOZM;
    this.standart = standart;
    this.lotNum = lotNum;
    this.shipmentOperDate = shipmentOperDate;
    this.vehicles = vehicles;
    this.qualityIndicators = qualityIndicators;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return certNum;
    case 1: return certDate;
    case 2: return supplierCode;
    case 3: return supplierName;
    case 4: return materialCode;
    case 5: return materialName;
    case 6: return materialOZM;
    case 7: return standart;
    case 8: return lotNum;
    case 9: return shipmentOperDate;
    case 10: return vehicles;
    case 11: return qualityIndicators;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: certNum = value$ != null ? value$.toString() : null; break;
    case 1: certDate = value$ != null ? value$.toString() : null; break;
    case 2: supplierCode = value$ != null ? value$.toString() : null; break;
    case 3: supplierName = value$ != null ? value$.toString() : null; break;
    case 4: materialCode = value$ != null ? value$.toString() : null; break;
    case 5: materialName = value$ != null ? value$.toString() : null; break;
    case 6: materialOZM = value$ != null ? value$.toString() : null; break;
    case 7: standart = value$ != null ? value$.toString() : null; break;
    case 8: lotNum = value$ != null ? value$.toString() : null; break;
    case 9: shipmentOperDate = value$ != null ? value$.toString() : null; break;
    case 10: vehicles = (java.util.List<nlmk.l3.transport.RecordVehicles>)value$; break;
    case 11: qualityIndicators = (java.util.List<nlmk.l3.transport.RecordQualityindicators>)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'certNum' field.
   * @return Номер сертификата качества
   */
  public java.lang.String getCertNum() {
    return certNum;
  }


  /**
   * Sets the value of the 'certNum' field.
   * Номер сертификата качества
   * @param value the value to set.
   */
  public void setCertNum(java.lang.String value) {
    this.certNum = value;
  }

  /**
   * Gets the value of the 'certDate' field.
   * @return Дата сертификата качества в формате YYYY-MM-DD
   */
  public java.lang.String getCertDate() {
    return certDate;
  }


  /**
   * Sets the value of the 'certDate' field.
   * Дата сертификата качества в формате YYYY-MM-DD
   * @param value the value to set.
   */
  public void setCertDate(java.lang.String value) {
    this.certDate = value;
  }

  /**
   * Gets the value of the 'supplierCode' field.
   * @return Код внешнего поставщика
   */
  public java.lang.String getSupplierCode() {
    return supplierCode;
  }


  /**
   * Sets the value of the 'supplierCode' field.
   * Код внешнего поставщика
   * @param value the value to set.
   */
  public void setSupplierCode(java.lang.String value) {
    this.supplierCode = value;
  }

  /**
   * Gets the value of the 'supplierName' field.
   * @return Наименование внешнего поставщика
   */
  public java.lang.String getSupplierName() {
    return supplierName;
  }


  /**
   * Sets the value of the 'supplierName' field.
   * Наименование внешнего поставщика
   * @param value the value to set.
   */
  public void setSupplierName(java.lang.String value) {
    this.supplierName = value;
  }

  /**
   * Gets the value of the 'materialCode' field.
   * @return Код ресурса
   */
  public java.lang.String getMaterialCode() {
    return materialCode;
  }


  /**
   * Sets the value of the 'materialCode' field.
   * Код ресурса
   * @param value the value to set.
   */
  public void setMaterialCode(java.lang.String value) {
    this.materialCode = value;
  }

  /**
   * Gets the value of the 'materialName' field.
   * @return Наименование ресурса (сырья)
   */
  public java.lang.String getMaterialName() {
    return materialName;
  }


  /**
   * Sets the value of the 'materialName' field.
   * Наименование ресурса (сырья)
   * @param value the value to set.
   */
  public void setMaterialName(java.lang.String value) {
    this.materialName = value;
  }

  /**
   * Gets the value of the 'materialOZM' field.
   * @return ОЗМ материального ресурса
   */
  public java.lang.String getMaterialOZM() {
    return materialOZM;
  }


  /**
   * Sets the value of the 'materialOZM' field.
   * ОЗМ материального ресурса
   * @param value the value to set.
   */
  public void setMaterialOZM(java.lang.String value) {
    this.materialOZM = value;
  }

  /**
   * Gets the value of the 'standart' field.
   * @return Наименование нормативного документа
   */
  public java.lang.String getStandart() {
    return standart;
  }


  /**
   * Sets the value of the 'standart' field.
   * Наименование нормативного документа
   * @param value the value to set.
   */
  public void setStandart(java.lang.String value) {
    this.standart = value;
  }

  /**
   * Gets the value of the 'lotNum' field.
   * @return Номер партии
   */
  public java.lang.String getLotNum() {
    return lotNum;
  }


  /**
   * Sets the value of the 'lotNum' field.
   * Номер партии
   * @param value the value to set.
   */
  public void setLotNum(java.lang.String value) {
    this.lotNum = value;
  }

  /**
   * Gets the value of the 'shipmentOperDate' field.
   * @return Дата отгрузки в формате YYYY-MM-DD
   */
  public java.lang.String getShipmentOperDate() {
    return shipmentOperDate;
  }


  /**
   * Sets the value of the 'shipmentOperDate' field.
   * Дата отгрузки в формате YYYY-MM-DD
   * @param value the value to set.
   */
  public void setShipmentOperDate(java.lang.String value) {
    this.shipmentOperDate = value;
  }

  /**
   * Gets the value of the 'vehicles' field.
   * @return Средства транспортировки
   */
  public java.util.List<nlmk.l3.transport.RecordVehicles> getVehicles() {
    return vehicles;
  }


  /**
   * Sets the value of the 'vehicles' field.
   * Средства транспортировки
   * @param value the value to set.
   */
  public void setVehicles(java.util.List<nlmk.l3.transport.RecordVehicles> value) {
    this.vehicles = value;
  }

  /**
   * Gets the value of the 'qualityIndicators' field.
   * @return Показатели качества
   */
  public java.util.List<nlmk.l3.transport.RecordQualityindicators> getQualityIndicators() {
    return qualityIndicators;
  }


  /**
   * Sets the value of the 'qualityIndicators' field.
   * Показатели качества
   * @param value the value to set.
   */
  public void setQualityIndicators(java.util.List<nlmk.l3.transport.RecordQualityindicators> value) {
    this.qualityIndicators = value;
  }

  /**
   * Creates a new RecordData RecordBuilder.
   * @return A new RecordData RecordBuilder
   */
  public static nlmk.l3.transport.RecordData.Builder newBuilder() {
    return new nlmk.l3.transport.RecordData.Builder();
  }

  /**
   * Creates a new RecordData RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new RecordData RecordBuilder
   */
  public static nlmk.l3.transport.RecordData.Builder newBuilder(nlmk.l3.transport.RecordData.Builder other) {
    if (other == null) {
      return new nlmk.l3.transport.RecordData.Builder();
    } else {
      return new nlmk.l3.transport.RecordData.Builder(other);
    }
  }

  /**
   * Creates a new RecordData RecordBuilder by copying an existing RecordData instance.
   * @param other The existing instance to copy.
   * @return A new RecordData RecordBuilder
   */
  public static nlmk.l3.transport.RecordData.Builder newBuilder(nlmk.l3.transport.RecordData other) {
    if (other == null) {
      return new nlmk.l3.transport.RecordData.Builder();
    } else {
      return new nlmk.l3.transport.RecordData.Builder(other);
    }
  }

  /**
   * RecordBuilder for RecordData instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<RecordData>
    implements org.apache.avro.data.RecordBuilder<RecordData> {

    /** Номер сертификата качества */
    private java.lang.String certNum;
    /** Дата сертификата качества в формате YYYY-MM-DD */
    private java.lang.String certDate;
    /** Код внешнего поставщика */
    private java.lang.String supplierCode;
    /** Наименование внешнего поставщика */
    private java.lang.String supplierName;
    /** Код ресурса */
    private java.lang.String materialCode;
    /** Наименование ресурса (сырья) */
    private java.lang.String materialName;
    /** ОЗМ материального ресурса */
    private java.lang.String materialOZM;
    /** Наименование нормативного документа */
    private java.lang.String standart;
    /** Номер партии */
    private java.lang.String lotNum;
    /** Дата отгрузки в формате YYYY-MM-DD */
    private java.lang.String shipmentOperDate;
    /** Средства транспортировки */
    private java.util.List<nlmk.l3.transport.RecordVehicles> vehicles;
    /** Показатели качества */
    private java.util.List<nlmk.l3.transport.RecordQualityindicators> qualityIndicators;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(nlmk.l3.transport.RecordData.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.certNum)) {
        this.certNum = data().deepCopy(fields()[0].schema(), other.certNum);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.certDate)) {
        this.certDate = data().deepCopy(fields()[1].schema(), other.certDate);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.supplierCode)) {
        this.supplierCode = data().deepCopy(fields()[2].schema(), other.supplierCode);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.supplierName)) {
        this.supplierName = data().deepCopy(fields()[3].schema(), other.supplierName);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.materialCode)) {
        this.materialCode = data().deepCopy(fields()[4].schema(), other.materialCode);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.materialName)) {
        this.materialName = data().deepCopy(fields()[5].schema(), other.materialName);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.materialOZM)) {
        this.materialOZM = data().deepCopy(fields()[6].schema(), other.materialOZM);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.standart)) {
        this.standart = data().deepCopy(fields()[7].schema(), other.standart);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.lotNum)) {
        this.lotNum = data().deepCopy(fields()[8].schema(), other.lotNum);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
      if (isValidValue(fields()[9], other.shipmentOperDate)) {
        this.shipmentOperDate = data().deepCopy(fields()[9].schema(), other.shipmentOperDate);
        fieldSetFlags()[9] = other.fieldSetFlags()[9];
      }
      if (isValidValue(fields()[10], other.vehicles)) {
        this.vehicles = data().deepCopy(fields()[10].schema(), other.vehicles);
        fieldSetFlags()[10] = other.fieldSetFlags()[10];
      }
      if (isValidValue(fields()[11], other.qualityIndicators)) {
        this.qualityIndicators = data().deepCopy(fields()[11].schema(), other.qualityIndicators);
        fieldSetFlags()[11] = other.fieldSetFlags()[11];
      }
    }

    /**
     * Creates a Builder by copying an existing RecordData instance
     * @param other The existing instance to copy.
     */
    private Builder(nlmk.l3.transport.RecordData other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.certNum)) {
        this.certNum = data().deepCopy(fields()[0].schema(), other.certNum);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.certDate)) {
        this.certDate = data().deepCopy(fields()[1].schema(), other.certDate);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.supplierCode)) {
        this.supplierCode = data().deepCopy(fields()[2].schema(), other.supplierCode);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.supplierName)) {
        this.supplierName = data().deepCopy(fields()[3].schema(), other.supplierName);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.materialCode)) {
        this.materialCode = data().deepCopy(fields()[4].schema(), other.materialCode);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.materialName)) {
        this.materialName = data().deepCopy(fields()[5].schema(), other.materialName);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.materialOZM)) {
        this.materialOZM = data().deepCopy(fields()[6].schema(), other.materialOZM);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.standart)) {
        this.standart = data().deepCopy(fields()[7].schema(), other.standart);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.lotNum)) {
        this.lotNum = data().deepCopy(fields()[8].schema(), other.lotNum);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.shipmentOperDate)) {
        this.shipmentOperDate = data().deepCopy(fields()[9].schema(), other.shipmentOperDate);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.vehicles)) {
        this.vehicles = data().deepCopy(fields()[10].schema(), other.vehicles);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.qualityIndicators)) {
        this.qualityIndicators = data().deepCopy(fields()[11].schema(), other.qualityIndicators);
        fieldSetFlags()[11] = true;
      }
    }

    /**
      * Gets the value of the 'certNum' field.
      * Номер сертификата качества
      * @return The value.
      */
    public java.lang.String getCertNum() {
      return certNum;
    }


    /**
      * Sets the value of the 'certNum' field.
      * Номер сертификата качества
      * @param value The value of 'certNum'.
      * @return This builder.
      */
    public nlmk.l3.transport.RecordData.Builder setCertNum(java.lang.String value) {
      validate(fields()[0], value);
      this.certNum = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'certNum' field has been set.
      * Номер сертификата качества
      * @return True if the 'certNum' field has been set, false otherwise.
      */
    public boolean hasCertNum() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'certNum' field.
      * Номер сертификата качества
      * @return This builder.
      */
    public nlmk.l3.transport.RecordData.Builder clearCertNum() {
      certNum = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'certDate' field.
      * Дата сертификата качества в формате YYYY-MM-DD
      * @return The value.
      */
    public java.lang.String getCertDate() {
      return certDate;
    }


    /**
      * Sets the value of the 'certDate' field.
      * Дата сертификата качества в формате YYYY-MM-DD
      * @param value The value of 'certDate'.
      * @return This builder.
      */
    public nlmk.l3.transport.RecordData.Builder setCertDate(java.lang.String value) {
      validate(fields()[1], value);
      this.certDate = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'certDate' field has been set.
      * Дата сертификата качества в формате YYYY-MM-DD
      * @return True if the 'certDate' field has been set, false otherwise.
      */
    public boolean hasCertDate() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'certDate' field.
      * Дата сертификата качества в формате YYYY-MM-DD
      * @return This builder.
      */
    public nlmk.l3.transport.RecordData.Builder clearCertDate() {
      certDate = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'supplierCode' field.
      * Код внешнего поставщика
      * @return The value.
      */
    public java.lang.String getSupplierCode() {
      return supplierCode;
    }


    /**
      * Sets the value of the 'supplierCode' field.
      * Код внешнего поставщика
      * @param value The value of 'supplierCode'.
      * @return This builder.
      */
    public nlmk.l3.transport.RecordData.Builder setSupplierCode(java.lang.String value) {
      validate(fields()[2], value);
      this.supplierCode = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'supplierCode' field has been set.
      * Код внешнего поставщика
      * @return True if the 'supplierCode' field has been set, false otherwise.
      */
    public boolean hasSupplierCode() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'supplierCode' field.
      * Код внешнего поставщика
      * @return This builder.
      */
    public nlmk.l3.transport.RecordData.Builder clearSupplierCode() {
      supplierCode = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'supplierName' field.
      * Наименование внешнего поставщика
      * @return The value.
      */
    public java.lang.String getSupplierName() {
      return supplierName;
    }


    /**
      * Sets the value of the 'supplierName' field.
      * Наименование внешнего поставщика
      * @param value The value of 'supplierName'.
      * @return This builder.
      */
    public nlmk.l3.transport.RecordData.Builder setSupplierName(java.lang.String value) {
      validate(fields()[3], value);
      this.supplierName = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'supplierName' field has been set.
      * Наименование внешнего поставщика
      * @return True if the 'supplierName' field has been set, false otherwise.
      */
    public boolean hasSupplierName() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'supplierName' field.
      * Наименование внешнего поставщика
      * @return This builder.
      */
    public nlmk.l3.transport.RecordData.Builder clearSupplierName() {
      supplierName = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'materialCode' field.
      * Код ресурса
      * @return The value.
      */
    public java.lang.String getMaterialCode() {
      return materialCode;
    }


    /**
      * Sets the value of the 'materialCode' field.
      * Код ресурса
      * @param value The value of 'materialCode'.
      * @return This builder.
      */
    public nlmk.l3.transport.RecordData.Builder setMaterialCode(java.lang.String value) {
      validate(fields()[4], value);
      this.materialCode = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'materialCode' field has been set.
      * Код ресурса
      * @return True if the 'materialCode' field has been set, false otherwise.
      */
    public boolean hasMaterialCode() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'materialCode' field.
      * Код ресурса
      * @return This builder.
      */
    public nlmk.l3.transport.RecordData.Builder clearMaterialCode() {
      materialCode = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'materialName' field.
      * Наименование ресурса (сырья)
      * @return The value.
      */
    public java.lang.String getMaterialName() {
      return materialName;
    }


    /**
      * Sets the value of the 'materialName' field.
      * Наименование ресурса (сырья)
      * @param value The value of 'materialName'.
      * @return This builder.
      */
    public nlmk.l3.transport.RecordData.Builder setMaterialName(java.lang.String value) {
      validate(fields()[5], value);
      this.materialName = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'materialName' field has been set.
      * Наименование ресурса (сырья)
      * @return True if the 'materialName' field has been set, false otherwise.
      */
    public boolean hasMaterialName() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'materialName' field.
      * Наименование ресурса (сырья)
      * @return This builder.
      */
    public nlmk.l3.transport.RecordData.Builder clearMaterialName() {
      materialName = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'materialOZM' field.
      * ОЗМ материального ресурса
      * @return The value.
      */
    public java.lang.String getMaterialOZM() {
      return materialOZM;
    }


    /**
      * Sets the value of the 'materialOZM' field.
      * ОЗМ материального ресурса
      * @param value The value of 'materialOZM'.
      * @return This builder.
      */
    public nlmk.l3.transport.RecordData.Builder setMaterialOZM(java.lang.String value) {
      validate(fields()[6], value);
      this.materialOZM = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'materialOZM' field has been set.
      * ОЗМ материального ресурса
      * @return True if the 'materialOZM' field has been set, false otherwise.
      */
    public boolean hasMaterialOZM() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'materialOZM' field.
      * ОЗМ материального ресурса
      * @return This builder.
      */
    public nlmk.l3.transport.RecordData.Builder clearMaterialOZM() {
      materialOZM = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'standart' field.
      * Наименование нормативного документа
      * @return The value.
      */
    public java.lang.String getStandart() {
      return standart;
    }


    /**
      * Sets the value of the 'standart' field.
      * Наименование нормативного документа
      * @param value The value of 'standart'.
      * @return This builder.
      */
    public nlmk.l3.transport.RecordData.Builder setStandart(java.lang.String value) {
      validate(fields()[7], value);
      this.standart = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'standart' field has been set.
      * Наименование нормативного документа
      * @return True if the 'standart' field has been set, false otherwise.
      */
    public boolean hasStandart() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'standart' field.
      * Наименование нормативного документа
      * @return This builder.
      */
    public nlmk.l3.transport.RecordData.Builder clearStandart() {
      standart = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'lotNum' field.
      * Номер партии
      * @return The value.
      */
    public java.lang.String getLotNum() {
      return lotNum;
    }


    /**
      * Sets the value of the 'lotNum' field.
      * Номер партии
      * @param value The value of 'lotNum'.
      * @return This builder.
      */
    public nlmk.l3.transport.RecordData.Builder setLotNum(java.lang.String value) {
      validate(fields()[8], value);
      this.lotNum = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'lotNum' field has been set.
      * Номер партии
      * @return True if the 'lotNum' field has been set, false otherwise.
      */
    public boolean hasLotNum() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'lotNum' field.
      * Номер партии
      * @return This builder.
      */
    public nlmk.l3.transport.RecordData.Builder clearLotNum() {
      lotNum = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'shipmentOperDate' field.
      * Дата отгрузки в формате YYYY-MM-DD
      * @return The value.
      */
    public java.lang.String getShipmentOperDate() {
      return shipmentOperDate;
    }


    /**
      * Sets the value of the 'shipmentOperDate' field.
      * Дата отгрузки в формате YYYY-MM-DD
      * @param value The value of 'shipmentOperDate'.
      * @return This builder.
      */
    public nlmk.l3.transport.RecordData.Builder setShipmentOperDate(java.lang.String value) {
      validate(fields()[9], value);
      this.shipmentOperDate = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'shipmentOperDate' field has been set.
      * Дата отгрузки в формате YYYY-MM-DD
      * @return True if the 'shipmentOperDate' field has been set, false otherwise.
      */
    public boolean hasShipmentOperDate() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'shipmentOperDate' field.
      * Дата отгрузки в формате YYYY-MM-DD
      * @return This builder.
      */
    public nlmk.l3.transport.RecordData.Builder clearShipmentOperDate() {
      shipmentOperDate = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'vehicles' field.
      * Средства транспортировки
      * @return The value.
      */
    public java.util.List<nlmk.l3.transport.RecordVehicles> getVehicles() {
      return vehicles;
    }


    /**
      * Sets the value of the 'vehicles' field.
      * Средства транспортировки
      * @param value The value of 'vehicles'.
      * @return This builder.
      */
    public nlmk.l3.transport.RecordData.Builder setVehicles(java.util.List<nlmk.l3.transport.RecordVehicles> value) {
      validate(fields()[10], value);
      this.vehicles = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'vehicles' field has been set.
      * Средства транспортировки
      * @return True if the 'vehicles' field has been set, false otherwise.
      */
    public boolean hasVehicles() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'vehicles' field.
      * Средства транспортировки
      * @return This builder.
      */
    public nlmk.l3.transport.RecordData.Builder clearVehicles() {
      vehicles = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'qualityIndicators' field.
      * Показатели качества
      * @return The value.
      */
    public java.util.List<nlmk.l3.transport.RecordQualityindicators> getQualityIndicators() {
      return qualityIndicators;
    }


    /**
      * Sets the value of the 'qualityIndicators' field.
      * Показатели качества
      * @param value The value of 'qualityIndicators'.
      * @return This builder.
      */
    public nlmk.l3.transport.RecordData.Builder setQualityIndicators(java.util.List<nlmk.l3.transport.RecordQualityindicators> value) {
      validate(fields()[11], value);
      this.qualityIndicators = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'qualityIndicators' field has been set.
      * Показатели качества
      * @return True if the 'qualityIndicators' field has been set, false otherwise.
      */
    public boolean hasQualityIndicators() {
      return fieldSetFlags()[11];
    }


    /**
      * Clears the value of the 'qualityIndicators' field.
      * Показатели качества
      * @return This builder.
      */
    public nlmk.l3.transport.RecordData.Builder clearQualityIndicators() {
      qualityIndicators = null;
      fieldSetFlags()[11] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public RecordData build() {
      try {
        RecordData record = new RecordData();
        record.certNum = fieldSetFlags()[0] ? this.certNum : (java.lang.String) defaultValue(fields()[0]);
        record.certDate = fieldSetFlags()[1] ? this.certDate : (java.lang.String) defaultValue(fields()[1]);
        record.supplierCode = fieldSetFlags()[2] ? this.supplierCode : (java.lang.String) defaultValue(fields()[2]);
        record.supplierName = fieldSetFlags()[3] ? this.supplierName : (java.lang.String) defaultValue(fields()[3]);
        record.materialCode = fieldSetFlags()[4] ? this.materialCode : (java.lang.String) defaultValue(fields()[4]);
        record.materialName = fieldSetFlags()[5] ? this.materialName : (java.lang.String) defaultValue(fields()[5]);
        record.materialOZM = fieldSetFlags()[6] ? this.materialOZM : (java.lang.String) defaultValue(fields()[6]);
        record.standart = fieldSetFlags()[7] ? this.standart : (java.lang.String) defaultValue(fields()[7]);
        record.lotNum = fieldSetFlags()[8] ? this.lotNum : (java.lang.String) defaultValue(fields()[8]);
        record.shipmentOperDate = fieldSetFlags()[9] ? this.shipmentOperDate : (java.lang.String) defaultValue(fields()[9]);
        record.vehicles = fieldSetFlags()[10] ? this.vehicles : (java.util.List<nlmk.l3.transport.RecordVehicles>) defaultValue(fields()[10]);
        record.qualityIndicators = fieldSetFlags()[11] ? this.qualityIndicators : (java.util.List<nlmk.l3.transport.RecordQualityindicators>) defaultValue(fields()[11]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<RecordData>
    WRITER$ = (org.apache.avro.io.DatumWriter<RecordData>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<RecordData>
    READER$ = (org.apache.avro.io.DatumReader<RecordData>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.certNum);

    out.writeString(this.certDate);

    out.writeString(this.supplierCode);

    out.writeString(this.supplierName);

    out.writeString(this.materialCode);

    out.writeString(this.materialName);

    out.writeString(this.materialOZM);

    out.writeString(this.standart);

    if (this.lotNum == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.lotNum);
    }

    out.writeString(this.shipmentOperDate);

    long size0 = this.vehicles.size();
    out.writeArrayStart();
    out.setItemCount(size0);
    long actualSize0 = 0;
    for (nlmk.l3.transport.RecordVehicles e0: this.vehicles) {
      actualSize0++;
      out.startItem();
      e0.customEncode(out);
    }
    out.writeArrayEnd();
    if (actualSize0 != size0)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size0 + ", but element count was " + actualSize0 + ".");

    long size1 = this.qualityIndicators.size();
    out.writeArrayStart();
    out.setItemCount(size1);
    long actualSize1 = 0;
    for (nlmk.l3.transport.RecordQualityindicators e1: this.qualityIndicators) {
      actualSize1++;
      out.startItem();
      e1.customEncode(out);
    }
    out.writeArrayEnd();
    if (actualSize1 != size1)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size1 + ", but element count was " + actualSize1 + ".");

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.certNum = in.readString();

      this.certDate = in.readString();

      this.supplierCode = in.readString();

      this.supplierName = in.readString();

      this.materialCode = in.readString();

      this.materialName = in.readString();

      this.materialOZM = in.readString();

      this.standart = in.readString();

      if (in.readIndex() != 1) {
        in.readNull();
        this.lotNum = null;
      } else {
        this.lotNum = in.readString();
      }

      this.shipmentOperDate = in.readString();

      long size0 = in.readArrayStart();
      java.util.List<nlmk.l3.transport.RecordVehicles> a0 = this.vehicles;
      if (a0 == null) {
        a0 = new SpecificData.Array<nlmk.l3.transport.RecordVehicles>((int)size0, SCHEMA$.getField("vehicles").schema());
        this.vehicles = a0;
      } else a0.clear();
      SpecificData.Array<nlmk.l3.transport.RecordVehicles> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<nlmk.l3.transport.RecordVehicles>)a0 : null);
      for ( ; 0 < size0; size0 = in.arrayNext()) {
        for ( ; size0 != 0; size0--) {
          nlmk.l3.transport.RecordVehicles e0 = (ga0 != null ? ga0.peek() : null);
          if (e0 == null) {
            e0 = new nlmk.l3.transport.RecordVehicles();
          }
          e0.customDecode(in);
          a0.add(e0);
        }
      }

      long size1 = in.readArrayStart();
      java.util.List<nlmk.l3.transport.RecordQualityindicators> a1 = this.qualityIndicators;
      if (a1 == null) {
        a1 = new SpecificData.Array<nlmk.l3.transport.RecordQualityindicators>((int)size1, SCHEMA$.getField("qualityIndicators").schema());
        this.qualityIndicators = a1;
      } else a1.clear();
      SpecificData.Array<nlmk.l3.transport.RecordQualityindicators> ga1 = (a1 instanceof SpecificData.Array ? (SpecificData.Array<nlmk.l3.transport.RecordQualityindicators>)a1 : null);
      for ( ; 0 < size1; size1 = in.arrayNext()) {
        for ( ; size1 != 0; size1--) {
          nlmk.l3.transport.RecordQualityindicators e1 = (ga1 != null ? ga1.peek() : null);
          if (e1 == null) {
            e1 = new nlmk.l3.transport.RecordQualityindicators();
          }
          e1.customDecode(in);
          a1.add(e1);
        }
      }

    } else {
      for (int i = 0; i < 12; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.certNum = in.readString();
          break;

        case 1:
          this.certDate = in.readString();
          break;

        case 2:
          this.supplierCode = in.readString();
          break;

        case 3:
          this.supplierName = in.readString();
          break;

        case 4:
          this.materialCode = in.readString();
          break;

        case 5:
          this.materialName = in.readString();
          break;

        case 6:
          this.materialOZM = in.readString();
          break;

        case 7:
          this.standart = in.readString();
          break;

        case 8:
          if (in.readIndex() != 1) {
            in.readNull();
            this.lotNum = null;
          } else {
            this.lotNum = in.readString();
          }
          break;

        case 9:
          this.shipmentOperDate = in.readString();
          break;

        case 10:
          long size0 = in.readArrayStart();
          java.util.List<nlmk.l3.transport.RecordVehicles> a0 = this.vehicles;
          if (a0 == null) {
            a0 = new SpecificData.Array<nlmk.l3.transport.RecordVehicles>((int)size0, SCHEMA$.getField("vehicles").schema());
            this.vehicles = a0;
          } else a0.clear();
          SpecificData.Array<nlmk.l3.transport.RecordVehicles> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<nlmk.l3.transport.RecordVehicles>)a0 : null);
          for ( ; 0 < size0; size0 = in.arrayNext()) {
            for ( ; size0 != 0; size0--) {
              nlmk.l3.transport.RecordVehicles e0 = (ga0 != null ? ga0.peek() : null);
              if (e0 == null) {
                e0 = new nlmk.l3.transport.RecordVehicles();
              }
              e0.customDecode(in);
              a0.add(e0);
            }
          }
          break;

        case 11:
          long size1 = in.readArrayStart();
          java.util.List<nlmk.l3.transport.RecordQualityindicators> a1 = this.qualityIndicators;
          if (a1 == null) {
            a1 = new SpecificData.Array<nlmk.l3.transport.RecordQualityindicators>((int)size1, SCHEMA$.getField("qualityIndicators").schema());
            this.qualityIndicators = a1;
          } else a1.clear();
          SpecificData.Array<nlmk.l3.transport.RecordQualityindicators> ga1 = (a1 instanceof SpecificData.Array ? (SpecificData.Array<nlmk.l3.transport.RecordQualityindicators>)a1 : null);
          for ( ; 0 < size1; size1 = in.arrayNext()) {
            for ( ; size1 != 0; size1--) {
              nlmk.l3.transport.RecordQualityindicators e1 = (ga1 != null ? ga1.peek() : null);
              if (e1 == null) {
                e1 = new nlmk.l3.transport.RecordQualityindicators();
              }
              e1.customDecode(in);
              a1.add(e1);
            }
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










