/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package nlmk.l3.transport.invoice;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

/** Данные операции */
@org.apache.avro.specific.AvroGenerated
public class RecordData extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 4480474569053106326L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"RecordData\",\"namespace\":\"nlmk.l3.transport.invoice\",\"doc\":\"Данные операции\",\"fields\":[{\"name\":\"arrivalDate\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Дата прибытия (в формате YYYY-MM-DDThh:mm:ss+hh:mm)\"},{\"name\":\"stationDepartureCode\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Код станции отправления\"},{\"name\":\"stationDepartureName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Название станции отправления\"},{\"name\":\"stationArrivalCode\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Код станции назначения\"},{\"name\":\"stationArrivalName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Название станции назначения\"},{\"name\":\"supplierCode\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Код грузоотправителя\"},{\"name\":\"supplierName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Наименование грузоотправителя\"},{\"name\":\"recipientCode\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Код грузополучателя\"},{\"name\":\"recipientName\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Наименование грузополучателя\"},{\"name\":\"materialCode\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Код груза\"},{\"name\":\"materialName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Наименование груза\"},{\"name\":\"positions\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"RecordPositions\",\"fields\":[{\"name\":\"wagonNum\",\"type\":\"int\",\"doc\":\"Номер вагона\"},{\"name\":\"wagonType\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Тип вагона\"},{\"name\":\"weightNet\",\"type\":\"float\",\"doc\":\"Вес груза, т\"},{\"name\":\"waybillWagonLink\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Идентификатор конкретного вагона в конкретной накладной\"}]}},\"doc\":\"Позиции накладной\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<RecordData> ENCODER =
      new BinaryMessageEncoder<RecordData>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<RecordData> DECODER =
      new BinaryMessageDecoder<RecordData>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<RecordData> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<RecordData> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<RecordData> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<RecordData>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this RecordData to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a RecordData from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a RecordData instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static RecordData fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Дата прибытия (в формате YYYY-MM-DDThh:mm:ss+hh:mm) */
  private java.lang.String arrivalDate;
  /** Код станции отправления */
  private java.lang.String stationDepartureCode;
  /** Название станции отправления */
  private java.lang.String stationDepartureName;
  /** Код станции назначения */
  private java.lang.String stationArrivalCode;
  /** Название станции назначения */
  private java.lang.String stationArrivalName;
  /** Код грузоотправителя */
  private java.lang.String supplierCode;
  /** Наименование грузоотправителя */
  private java.lang.String supplierName;
  /** Код грузополучателя */
  private java.lang.String recipientCode;
  /** Наименование грузополучателя */
  private java.lang.String recipientName;
  /** Код груза */
  private java.lang.String materialCode;
  /** Наименование груза */
  private java.lang.String materialName;
  /** Позиции накладной */
  private java.util.List<nlmk.l3.transport.invoice.RecordPositions> positions;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public RecordData() {}

  /**
   * All-args constructor.
   * @param arrivalDate Дата прибытия (в формате YYYY-MM-DDThh:mm:ss+hh:mm)
   * @param stationDepartureCode Код станции отправления
   * @param stationDepartureName Название станции отправления
   * @param stationArrivalCode Код станции назначения
   * @param stationArrivalName Название станции назначения
   * @param supplierCode Код грузоотправителя
   * @param supplierName Наименование грузоотправителя
   * @param recipientCode Код грузополучателя
   * @param recipientName Наименование грузополучателя
   * @param materialCode Код груза
   * @param materialName Наименование груза
   * @param positions Позиции накладной
   */
  public RecordData(java.lang.String arrivalDate, java.lang.String stationDepartureCode, java.lang.String stationDepartureName, java.lang.String stationArrivalCode, java.lang.String stationArrivalName, java.lang.String supplierCode, java.lang.String supplierName, java.lang.String recipientCode, java.lang.String recipientName, java.lang.String materialCode, java.lang.String materialName, java.util.List<nlmk.l3.transport.invoice.RecordPositions> positions) {
    this.arrivalDate = arrivalDate;
    this.stationDepartureCode = stationDepartureCode;
    this.stationDepartureName = stationDepartureName;
    this.stationArrivalCode = stationArrivalCode;
    this.stationArrivalName = stationArrivalName;
    this.supplierCode = supplierCode;
    this.supplierName = supplierName;
    this.recipientCode = recipientCode;
    this.recipientName = recipientName;
    this.materialCode = materialCode;
    this.materialName = materialName;
    this.positions = positions;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return arrivalDate;
    case 1: return stationDepartureCode;
    case 2: return stationDepartureName;
    case 3: return stationArrivalCode;
    case 4: return stationArrivalName;
    case 5: return supplierCode;
    case 6: return supplierName;
    case 7: return recipientCode;
    case 8: return recipientName;
    case 9: return materialCode;
    case 10: return materialName;
    case 11: return positions;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: arrivalDate = value$ != null ? value$.toString() : null; break;
    case 1: stationDepartureCode = value$ != null ? value$.toString() : null; break;
    case 2: stationDepartureName = value$ != null ? value$.toString() : null; break;
    case 3: stationArrivalCode = value$ != null ? value$.toString() : null; break;
    case 4: stationArrivalName = value$ != null ? value$.toString() : null; break;
    case 5: supplierCode = value$ != null ? value$.toString() : null; break;
    case 6: supplierName = value$ != null ? value$.toString() : null; break;
    case 7: recipientCode = value$ != null ? value$.toString() : null; break;
    case 8: recipientName = value$ != null ? value$.toString() : null; break;
    case 9: materialCode = value$ != null ? value$.toString() : null; break;
    case 10: materialName = value$ != null ? value$.toString() : null; break;
    case 11: positions = (java.util.List<nlmk.l3.transport.invoice.RecordPositions>)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'arrivalDate' field.
   * @return Дата прибытия (в формате YYYY-MM-DDThh:mm:ss+hh:mm)
   */
  public java.lang.String getArrivalDate() {
    return arrivalDate;
  }


  /**
   * Sets the value of the 'arrivalDate' field.
   * Дата прибытия (в формате YYYY-MM-DDThh:mm:ss+hh:mm)
   * @param value the value to set.
   */
  public void setArrivalDate(java.lang.String value) {
    this.arrivalDate = value;
  }

  /**
   * Gets the value of the 'stationDepartureCode' field.
   * @return Код станции отправления
   */
  public java.lang.String getStationDepartureCode() {
    return stationDepartureCode;
  }


  /**
   * Sets the value of the 'stationDepartureCode' field.
   * Код станции отправления
   * @param value the value to set.
   */
  public void setStationDepartureCode(java.lang.String value) {
    this.stationDepartureCode = value;
  }

  /**
   * Gets the value of the 'stationDepartureName' field.
   * @return Название станции отправления
   */
  public java.lang.String getStationDepartureName() {
    return stationDepartureName;
  }


  /**
   * Sets the value of the 'stationDepartureName' field.
   * Название станции отправления
   * @param value the value to set.
   */
  public void setStationDepartureName(java.lang.String value) {
    this.stationDepartureName = value;
  }

  /**
   * Gets the value of the 'stationArrivalCode' field.
   * @return Код станции назначения
   */
  public java.lang.String getStationArrivalCode() {
    return stationArrivalCode;
  }


  /**
   * Sets the value of the 'stationArrivalCode' field.
   * Код станции назначения
   * @param value the value to set.
   */
  public void setStationArrivalCode(java.lang.String value) {
    this.stationArrivalCode = value;
  }

  /**
   * Gets the value of the 'stationArrivalName' field.
   * @return Название станции назначения
   */
  public java.lang.String getStationArrivalName() {
    return stationArrivalName;
  }


  /**
   * Sets the value of the 'stationArrivalName' field.
   * Название станции назначения
   * @param value the value to set.
   */
  public void setStationArrivalName(java.lang.String value) {
    this.stationArrivalName = value;
  }

  /**
   * Gets the value of the 'supplierCode' field.
   * @return Код грузоотправителя
   */
  public java.lang.String getSupplierCode() {
    return supplierCode;
  }


  /**
   * Sets the value of the 'supplierCode' field.
   * Код грузоотправителя
   * @param value the value to set.
   */
  public void setSupplierCode(java.lang.String value) {
    this.supplierCode = value;
  }

  /**
   * Gets the value of the 'supplierName' field.
   * @return Наименование грузоотправителя
   */
  public java.lang.String getSupplierName() {
    return supplierName;
  }


  /**
   * Sets the value of the 'supplierName' field.
   * Наименование грузоотправителя
   * @param value the value to set.
   */
  public void setSupplierName(java.lang.String value) {
    this.supplierName = value;
  }

  /**
   * Gets the value of the 'recipientCode' field.
   * @return Код грузополучателя
   */
  public java.lang.String getRecipientCode() {
    return recipientCode;
  }


  /**
   * Sets the value of the 'recipientCode' field.
   * Код грузополучателя
   * @param value the value to set.
   */
  public void setRecipientCode(java.lang.String value) {
    this.recipientCode = value;
  }

  /**
   * Gets the value of the 'recipientName' field.
   * @return Наименование грузополучателя
   */
  public java.lang.String getRecipientName() {
    return recipientName;
  }


  /**
   * Sets the value of the 'recipientName' field.
   * Наименование грузополучателя
   * @param value the value to set.
   */
  public void setRecipientName(java.lang.String value) {
    this.recipientName = value;
  }

  /**
   * Gets the value of the 'materialCode' field.
   * @return Код груза
   */
  public java.lang.String getMaterialCode() {
    return materialCode;
  }


  /**
   * Sets the value of the 'materialCode' field.
   * Код груза
   * @param value the value to set.
   */
  public void setMaterialCode(java.lang.String value) {
    this.materialCode = value;
  }

  /**
   * Gets the value of the 'materialName' field.
   * @return Наименование груза
   */
  public java.lang.String getMaterialName() {
    return materialName;
  }


  /**
   * Sets the value of the 'materialName' field.
   * Наименование груза
   * @param value the value to set.
   */
  public void setMaterialName(java.lang.String value) {
    this.materialName = value;
  }

  /**
   * Gets the value of the 'positions' field.
   * @return Позиции накладной
   */
  public java.util.List<nlmk.l3.transport.invoice.RecordPositions> getPositions() {
    return positions;
  }


  /**
   * Sets the value of the 'positions' field.
   * Позиции накладной
   * @param value the value to set.
   */
  public void setPositions(java.util.List<nlmk.l3.transport.invoice.RecordPositions> value) {
    this.positions = value;
  }

  /**
   * Creates a new RecordData RecordBuilder.
   * @return A new RecordData RecordBuilder
   */
  public static nlmk.l3.transport.invoice.RecordData.Builder newBuilder() {
    return new nlmk.l3.transport.invoice.RecordData.Builder();
  }

  /**
   * Creates a new RecordData RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new RecordData RecordBuilder
   */
  public static nlmk.l3.transport.invoice.RecordData.Builder newBuilder(nlmk.l3.transport.invoice.RecordData.Builder other) {
    if (other == null) {
      return new nlmk.l3.transport.invoice.RecordData.Builder();
    } else {
      return new nlmk.l3.transport.invoice.RecordData.Builder(other);
    }
  }

  /**
   * Creates a new RecordData RecordBuilder by copying an existing RecordData instance.
   * @param other The existing instance to copy.
   * @return A new RecordData RecordBuilder
   */
  public static nlmk.l3.transport.invoice.RecordData.Builder newBuilder(nlmk.l3.transport.invoice.RecordData other) {
    if (other == null) {
      return new nlmk.l3.transport.invoice.RecordData.Builder();
    } else {
      return new nlmk.l3.transport.invoice.RecordData.Builder(other);
    }
  }

  /**
   * RecordBuilder for RecordData instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<RecordData>
    implements org.apache.avro.data.RecordBuilder<RecordData> {

    /** Дата прибытия (в формате YYYY-MM-DDThh:mm:ss+hh:mm) */
    private java.lang.String arrivalDate;
    /** Код станции отправления */
    private java.lang.String stationDepartureCode;
    /** Название станции отправления */
    private java.lang.String stationDepartureName;
    /** Код станции назначения */
    private java.lang.String stationArrivalCode;
    /** Название станции назначения */
    private java.lang.String stationArrivalName;
    /** Код грузоотправителя */
    private java.lang.String supplierCode;
    /** Наименование грузоотправителя */
    private java.lang.String supplierName;
    /** Код грузополучателя */
    private java.lang.String recipientCode;
    /** Наименование грузополучателя */
    private java.lang.String recipientName;
    /** Код груза */
    private java.lang.String materialCode;
    /** Наименование груза */
    private java.lang.String materialName;
    /** Позиции накладной */
    private java.util.List<nlmk.l3.transport.invoice.RecordPositions> positions;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(nlmk.l3.transport.invoice.RecordData.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.arrivalDate)) {
        this.arrivalDate = data().deepCopy(fields()[0].schema(), other.arrivalDate);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.stationDepartureCode)) {
        this.stationDepartureCode = data().deepCopy(fields()[1].schema(), other.stationDepartureCode);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.stationDepartureName)) {
        this.stationDepartureName = data().deepCopy(fields()[2].schema(), other.stationDepartureName);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.stationArrivalCode)) {
        this.stationArrivalCode = data().deepCopy(fields()[3].schema(), other.stationArrivalCode);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.stationArrivalName)) {
        this.stationArrivalName = data().deepCopy(fields()[4].schema(), other.stationArrivalName);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.supplierCode)) {
        this.supplierCode = data().deepCopy(fields()[5].schema(), other.supplierCode);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.supplierName)) {
        this.supplierName = data().deepCopy(fields()[6].schema(), other.supplierName);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.recipientCode)) {
        this.recipientCode = data().deepCopy(fields()[7].schema(), other.recipientCode);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.recipientName)) {
        this.recipientName = data().deepCopy(fields()[8].schema(), other.recipientName);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
      if (isValidValue(fields()[9], other.materialCode)) {
        this.materialCode = data().deepCopy(fields()[9].schema(), other.materialCode);
        fieldSetFlags()[9] = other.fieldSetFlags()[9];
      }
      if (isValidValue(fields()[10], other.materialName)) {
        this.materialName = data().deepCopy(fields()[10].schema(), other.materialName);
        fieldSetFlags()[10] = other.fieldSetFlags()[10];
      }
      if (isValidValue(fields()[11], other.positions)) {
        this.positions = data().deepCopy(fields()[11].schema(), other.positions);
        fieldSetFlags()[11] = other.fieldSetFlags()[11];
      }
    }

    /**
     * Creates a Builder by copying an existing RecordData instance
     * @param other The existing instance to copy.
     */
    private Builder(nlmk.l3.transport.invoice.RecordData other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.arrivalDate)) {
        this.arrivalDate = data().deepCopy(fields()[0].schema(), other.arrivalDate);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.stationDepartureCode)) {
        this.stationDepartureCode = data().deepCopy(fields()[1].schema(), other.stationDepartureCode);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.stationDepartureName)) {
        this.stationDepartureName = data().deepCopy(fields()[2].schema(), other.stationDepartureName);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.stationArrivalCode)) {
        this.stationArrivalCode = data().deepCopy(fields()[3].schema(), other.stationArrivalCode);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.stationArrivalName)) {
        this.stationArrivalName = data().deepCopy(fields()[4].schema(), other.stationArrivalName);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.supplierCode)) {
        this.supplierCode = data().deepCopy(fields()[5].schema(), other.supplierCode);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.supplierName)) {
        this.supplierName = data().deepCopy(fields()[6].schema(), other.supplierName);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.recipientCode)) {
        this.recipientCode = data().deepCopy(fields()[7].schema(), other.recipientCode);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.recipientName)) {
        this.recipientName = data().deepCopy(fields()[8].schema(), other.recipientName);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.materialCode)) {
        this.materialCode = data().deepCopy(fields()[9].schema(), other.materialCode);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.materialName)) {
        this.materialName = data().deepCopy(fields()[10].schema(), other.materialName);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.positions)) {
        this.positions = data().deepCopy(fields()[11].schema(), other.positions);
        fieldSetFlags()[11] = true;
      }
    }

    /**
      * Gets the value of the 'arrivalDate' field.
      * Дата прибытия (в формате YYYY-MM-DDThh:mm:ss+hh:mm)
      * @return The value.
      */
    public java.lang.String getArrivalDate() {
      return arrivalDate;
    }


    /**
      * Sets the value of the 'arrivalDate' field.
      * Дата прибытия (в формате YYYY-MM-DDThh:mm:ss+hh:mm)
      * @param value The value of 'arrivalDate'.
      * @return This builder.
      */
    public nlmk.l3.transport.invoice.RecordData.Builder setArrivalDate(java.lang.String value) {
      validate(fields()[0], value);
      this.arrivalDate = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'arrivalDate' field has been set.
      * Дата прибытия (в формате YYYY-MM-DDThh:mm:ss+hh:mm)
      * @return True if the 'arrivalDate' field has been set, false otherwise.
      */
    public boolean hasArrivalDate() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'arrivalDate' field.
      * Дата прибытия (в формате YYYY-MM-DDThh:mm:ss+hh:mm)
      * @return This builder.
      */
    public nlmk.l3.transport.invoice.RecordData.Builder clearArrivalDate() {
      arrivalDate = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'stationDepartureCode' field.
      * Код станции отправления
      * @return The value.
      */
    public java.lang.String getStationDepartureCode() {
      return stationDepartureCode;
    }


    /**
      * Sets the value of the 'stationDepartureCode' field.
      * Код станции отправления
      * @param value The value of 'stationDepartureCode'.
      * @return This builder.
      */
    public nlmk.l3.transport.invoice.RecordData.Builder setStationDepartureCode(java.lang.String value) {
      validate(fields()[1], value);
      this.stationDepartureCode = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'stationDepartureCode' field has been set.
      * Код станции отправления
      * @return True if the 'stationDepartureCode' field has been set, false otherwise.
      */
    public boolean hasStationDepartureCode() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'stationDepartureCode' field.
      * Код станции отправления
      * @return This builder.
      */
    public nlmk.l3.transport.invoice.RecordData.Builder clearStationDepartureCode() {
      stationDepartureCode = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'stationDepartureName' field.
      * Название станции отправления
      * @return The value.
      */
    public java.lang.String getStationDepartureName() {
      return stationDepartureName;
    }


    /**
      * Sets the value of the 'stationDepartureName' field.
      * Название станции отправления
      * @param value The value of 'stationDepartureName'.
      * @return This builder.
      */
    public nlmk.l3.transport.invoice.RecordData.Builder setStationDepartureName(java.lang.String value) {
      validate(fields()[2], value);
      this.stationDepartureName = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'stationDepartureName' field has been set.
      * Название станции отправления
      * @return True if the 'stationDepartureName' field has been set, false otherwise.
      */
    public boolean hasStationDepartureName() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'stationDepartureName' field.
      * Название станции отправления
      * @return This builder.
      */
    public nlmk.l3.transport.invoice.RecordData.Builder clearStationDepartureName() {
      stationDepartureName = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'stationArrivalCode' field.
      * Код станции назначения
      * @return The value.
      */
    public java.lang.String getStationArrivalCode() {
      return stationArrivalCode;
    }


    /**
      * Sets the value of the 'stationArrivalCode' field.
      * Код станции назначения
      * @param value The value of 'stationArrivalCode'.
      * @return This builder.
      */
    public nlmk.l3.transport.invoice.RecordData.Builder setStationArrivalCode(java.lang.String value) {
      validate(fields()[3], value);
      this.stationArrivalCode = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'stationArrivalCode' field has been set.
      * Код станции назначения
      * @return True if the 'stationArrivalCode' field has been set, false otherwise.
      */
    public boolean hasStationArrivalCode() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'stationArrivalCode' field.
      * Код станции назначения
      * @return This builder.
      */
    public nlmk.l3.transport.invoice.RecordData.Builder clearStationArrivalCode() {
      stationArrivalCode = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'stationArrivalName' field.
      * Название станции назначения
      * @return The value.
      */
    public java.lang.String getStationArrivalName() {
      return stationArrivalName;
    }


    /**
      * Sets the value of the 'stationArrivalName' field.
      * Название станции назначения
      * @param value The value of 'stationArrivalName'.
      * @return This builder.
      */
    public nlmk.l3.transport.invoice.RecordData.Builder setStationArrivalName(java.lang.String value) {
      validate(fields()[4], value);
      this.stationArrivalName = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'stationArrivalName' field has been set.
      * Название станции назначения
      * @return True if the 'stationArrivalName' field has been set, false otherwise.
      */
    public boolean hasStationArrivalName() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'stationArrivalName' field.
      * Название станции назначения
      * @return This builder.
      */
    public nlmk.l3.transport.invoice.RecordData.Builder clearStationArrivalName() {
      stationArrivalName = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'supplierCode' field.
      * Код грузоотправителя
      * @return The value.
      */
    public java.lang.String getSupplierCode() {
      return supplierCode;
    }


    /**
      * Sets the value of the 'supplierCode' field.
      * Код грузоотправителя
      * @param value The value of 'supplierCode'.
      * @return This builder.
      */
    public nlmk.l3.transport.invoice.RecordData.Builder setSupplierCode(java.lang.String value) {
      validate(fields()[5], value);
      this.supplierCode = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'supplierCode' field has been set.
      * Код грузоотправителя
      * @return True if the 'supplierCode' field has been set, false otherwise.
      */
    public boolean hasSupplierCode() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'supplierCode' field.
      * Код грузоотправителя
      * @return This builder.
      */
    public nlmk.l3.transport.invoice.RecordData.Builder clearSupplierCode() {
      supplierCode = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'supplierName' field.
      * Наименование грузоотправителя
      * @return The value.
      */
    public java.lang.String getSupplierName() {
      return supplierName;
    }


    /**
      * Sets the value of the 'supplierName' field.
      * Наименование грузоотправителя
      * @param value The value of 'supplierName'.
      * @return This builder.
      */
    public nlmk.l3.transport.invoice.RecordData.Builder setSupplierName(java.lang.String value) {
      validate(fields()[6], value);
      this.supplierName = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'supplierName' field has been set.
      * Наименование грузоотправителя
      * @return True if the 'supplierName' field has been set, false otherwise.
      */
    public boolean hasSupplierName() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'supplierName' field.
      * Наименование грузоотправителя
      * @return This builder.
      */
    public nlmk.l3.transport.invoice.RecordData.Builder clearSupplierName() {
      supplierName = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'recipientCode' field.
      * Код грузополучателя
      * @return The value.
      */
    public java.lang.String getRecipientCode() {
      return recipientCode;
    }


    /**
      * Sets the value of the 'recipientCode' field.
      * Код грузополучателя
      * @param value The value of 'recipientCode'.
      * @return This builder.
      */
    public nlmk.l3.transport.invoice.RecordData.Builder setRecipientCode(java.lang.String value) {
      validate(fields()[7], value);
      this.recipientCode = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'recipientCode' field has been set.
      * Код грузополучателя
      * @return True if the 'recipientCode' field has been set, false otherwise.
      */
    public boolean hasRecipientCode() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'recipientCode' field.
      * Код грузополучателя
      * @return This builder.
      */
    public nlmk.l3.transport.invoice.RecordData.Builder clearRecipientCode() {
      recipientCode = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'recipientName' field.
      * Наименование грузополучателя
      * @return The value.
      */
    public java.lang.String getRecipientName() {
      return recipientName;
    }


    /**
      * Sets the value of the 'recipientName' field.
      * Наименование грузополучателя
      * @param value The value of 'recipientName'.
      * @return This builder.
      */
    public nlmk.l3.transport.invoice.RecordData.Builder setRecipientName(java.lang.String value) {
      validate(fields()[8], value);
      this.recipientName = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'recipientName' field has been set.
      * Наименование грузополучателя
      * @return True if the 'recipientName' field has been set, false otherwise.
      */
    public boolean hasRecipientName() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'recipientName' field.
      * Наименование грузополучателя
      * @return This builder.
      */
    public nlmk.l3.transport.invoice.RecordData.Builder clearRecipientName() {
      recipientName = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'materialCode' field.
      * Код груза
      * @return The value.
      */
    public java.lang.String getMaterialCode() {
      return materialCode;
    }


    /**
      * Sets the value of the 'materialCode' field.
      * Код груза
      * @param value The value of 'materialCode'.
      * @return This builder.
      */
    public nlmk.l3.transport.invoice.RecordData.Builder setMaterialCode(java.lang.String value) {
      validate(fields()[9], value);
      this.materialCode = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'materialCode' field has been set.
      * Код груза
      * @return True if the 'materialCode' field has been set, false otherwise.
      */
    public boolean hasMaterialCode() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'materialCode' field.
      * Код груза
      * @return This builder.
      */
    public nlmk.l3.transport.invoice.RecordData.Builder clearMaterialCode() {
      materialCode = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'materialName' field.
      * Наименование груза
      * @return The value.
      */
    public java.lang.String getMaterialName() {
      return materialName;
    }


    /**
      * Sets the value of the 'materialName' field.
      * Наименование груза
      * @param value The value of 'materialName'.
      * @return This builder.
      */
    public nlmk.l3.transport.invoice.RecordData.Builder setMaterialName(java.lang.String value) {
      validate(fields()[10], value);
      this.materialName = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'materialName' field has been set.
      * Наименование груза
      * @return True if the 'materialName' field has been set, false otherwise.
      */
    public boolean hasMaterialName() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'materialName' field.
      * Наименование груза
      * @return This builder.
      */
    public nlmk.l3.transport.invoice.RecordData.Builder clearMaterialName() {
      materialName = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'positions' field.
      * Позиции накладной
      * @return The value.
      */
    public java.util.List<nlmk.l3.transport.invoice.RecordPositions> getPositions() {
      return positions;
    }


    /**
      * Sets the value of the 'positions' field.
      * Позиции накладной
      * @param value The value of 'positions'.
      * @return This builder.
      */
    public nlmk.l3.transport.invoice.RecordData.Builder setPositions(java.util.List<nlmk.l3.transport.invoice.RecordPositions> value) {
      validate(fields()[11], value);
      this.positions = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'positions' field has been set.
      * Позиции накладной
      * @return True if the 'positions' field has been set, false otherwise.
      */
    public boolean hasPositions() {
      return fieldSetFlags()[11];
    }


    /**
      * Clears the value of the 'positions' field.
      * Позиции накладной
      * @return This builder.
      */
    public nlmk.l3.transport.invoice.RecordData.Builder clearPositions() {
      positions = null;
      fieldSetFlags()[11] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public RecordData build() {
      try {
        RecordData record = new RecordData();
        record.arrivalDate = fieldSetFlags()[0] ? this.arrivalDate : (java.lang.String) defaultValue(fields()[0]);
        record.stationDepartureCode = fieldSetFlags()[1] ? this.stationDepartureCode : (java.lang.String) defaultValue(fields()[1]);
        record.stationDepartureName = fieldSetFlags()[2] ? this.stationDepartureName : (java.lang.String) defaultValue(fields()[2]);
        record.stationArrivalCode = fieldSetFlags()[3] ? this.stationArrivalCode : (java.lang.String) defaultValue(fields()[3]);
        record.stationArrivalName = fieldSetFlags()[4] ? this.stationArrivalName : (java.lang.String) defaultValue(fields()[4]);
        record.supplierCode = fieldSetFlags()[5] ? this.supplierCode : (java.lang.String) defaultValue(fields()[5]);
        record.supplierName = fieldSetFlags()[6] ? this.supplierName : (java.lang.String) defaultValue(fields()[6]);
        record.recipientCode = fieldSetFlags()[7] ? this.recipientCode : (java.lang.String) defaultValue(fields()[7]);
        record.recipientName = fieldSetFlags()[8] ? this.recipientName : (java.lang.String) defaultValue(fields()[8]);
        record.materialCode = fieldSetFlags()[9] ? this.materialCode : (java.lang.String) defaultValue(fields()[9]);
        record.materialName = fieldSetFlags()[10] ? this.materialName : (java.lang.String) defaultValue(fields()[10]);
        record.positions = fieldSetFlags()[11] ? this.positions : (java.util.List<nlmk.l3.transport.invoice.RecordPositions>) defaultValue(fields()[11]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<RecordData>
    WRITER$ = (org.apache.avro.io.DatumWriter<RecordData>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<RecordData>
    READER$ = (org.apache.avro.io.DatumReader<RecordData>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.arrivalDate);

    out.writeString(this.stationDepartureCode);

    out.writeString(this.stationDepartureName);

    out.writeString(this.stationArrivalCode);

    out.writeString(this.stationArrivalName);

    out.writeString(this.supplierCode);

    out.writeString(this.supplierName);

    out.writeString(this.recipientCode);

    if (this.recipientName == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.recipientName);
    }

    out.writeString(this.materialCode);

    out.writeString(this.materialName);

    long size0 = this.positions.size();
    out.writeArrayStart();
    out.setItemCount(size0);
    long actualSize0 = 0;
    for (nlmk.l3.transport.invoice.RecordPositions e0: this.positions) {
      actualSize0++;
      out.startItem();
      e0.customEncode(out);
    }
    out.writeArrayEnd();
    if (actualSize0 != size0)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size0 + ", but element count was " + actualSize0 + ".");

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.arrivalDate = in.readString();

      this.stationDepartureCode = in.readString();

      this.stationDepartureName = in.readString();

      this.stationArrivalCode = in.readString();

      this.stationArrivalName = in.readString();

      this.supplierCode = in.readString();

      this.supplierName = in.readString();

      this.recipientCode = in.readString();

      if (in.readIndex() != 1) {
        in.readNull();
        this.recipientName = null;
      } else {
        this.recipientName = in.readString();
      }

      this.materialCode = in.readString();

      this.materialName = in.readString();

      long size0 = in.readArrayStart();
      java.util.List<nlmk.l3.transport.invoice.RecordPositions> a0 = this.positions;
      if (a0 == null) {
        a0 = new SpecificData.Array<nlmk.l3.transport.invoice.RecordPositions>((int)size0, SCHEMA$.getField("positions").schema());
        this.positions = a0;
      } else a0.clear();
      SpecificData.Array<nlmk.l3.transport.invoice.RecordPositions> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<nlmk.l3.transport.invoice.RecordPositions>)a0 : null);
      for ( ; 0 < size0; size0 = in.arrayNext()) {
        for ( ; size0 != 0; size0--) {
          nlmk.l3.transport.invoice.RecordPositions e0 = (ga0 != null ? ga0.peek() : null);
          if (e0 == null) {
            e0 = new nlmk.l3.transport.invoice.RecordPositions();
          }
          e0.customDecode(in);
          a0.add(e0);
        }
      }

    } else {
      for (int i = 0; i < 12; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.arrivalDate = in.readString();
          break;

        case 1:
          this.stationDepartureCode = in.readString();
          break;

        case 2:
          this.stationDepartureName = in.readString();
          break;

        case 3:
          this.stationArrivalCode = in.readString();
          break;

        case 4:
          this.stationArrivalName = in.readString();
          break;

        case 5:
          this.supplierCode = in.readString();
          break;

        case 6:
          this.supplierName = in.readString();
          break;

        case 7:
          this.recipientCode = in.readString();
          break;

        case 8:
          if (in.readIndex() != 1) {
            in.readNull();
            this.recipientName = null;
          } else {
            this.recipientName = in.readString();
          }
          break;

        case 9:
          this.materialCode = in.readString();
          break;

        case 10:
          this.materialName = in.readString();
          break;

        case 11:
          long size0 = in.readArrayStart();
          java.util.List<nlmk.l3.transport.invoice.RecordPositions> a0 = this.positions;
          if (a0 == null) {
            a0 = new SpecificData.Array<nlmk.l3.transport.invoice.RecordPositions>((int)size0, SCHEMA$.getField("positions").schema());
            this.positions = a0;
          } else a0.clear();
          SpecificData.Array<nlmk.l3.transport.invoice.RecordPositions> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<nlmk.l3.transport.invoice.RecordPositions>)a0 : null);
          for ( ; 0 < size0; size0 = in.arrayNext()) {
            for ( ; size0 != 0; size0--) {
              nlmk.l3.transport.invoice.RecordPositions e0 = (ga0 != null ? ga0.peek() : null);
              if (e0 == null) {
                e0 = new nlmk.l3.transport.invoice.RecordPositions();
              }
              e0.customDecode(in);
              a0.add(e0);
            }
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










